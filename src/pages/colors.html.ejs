<tabs class="page-tabs" active-tab="pageCtrl.activePageTab" tabs="{about: 'About', install: 'Install &amp; Setup', usage: 'Usage'}">
	<!-- About. -->
	<div class="tabs__content">
		<%- include partials/_intro.html.ejs %>

		<h2 class="font__headline">Approved Colors</h2>
		<p>Only approved colors should be used. Any exception requires UX approval. <em>Note: Very few non-neutral colors are needed since we should be using client-specific colors.</em></p>
		<h3 class="font__title">App Colors</h3>
		<ul class="pg-colors__colors-list">
			<% Object.keys(data.colors.static).forEach(color => { %>
				<li class="pg-colors__color<% if (color.indexOf('light') === 0) { %> pg-colors__color--dark<% } %>">
					<div class="pg-colors__color-value bg__<%= color %>">
						<span><%= color %></span>
						<span><%= data.colors.static[color].value %></span>
					</div>
					<div class="pg-colors__color-meta"><%= data.colors.static[color].usage %></div>
				</li>
			<% }); %>
		</ul>

		<h3 class="font__title">Dynamic Client Colors</h3>
		<p>DS UI Colors makes an easy way to apply dynamic, client-specific colors, which are selected by each client and applied at app runtime. Here are the names of DS UI dynamic color variables and "placeholder" color values:</p>
		<ul class="pg-colors__colors-list">
			<% Object.keys(data.colors.dynamic).forEach(color => { %>
				<li class="pg-colors__color">
					<div class="pg-colors__color-value bg__<%= color %>">
						<span><%= color %></span>
						<span><%= data.colors.dynamic[color].value %></span>
					</div>
					<div class="pg-colors__color-meta"><%= data.colors.dynamic[color].usage %></div>
				</li>
			<% }); %>
		</ul>
		<p><em>Note: These specific color values are DirectScale specific colors, intended to illustrate how dynamic, client colors work. They are NOT UX approved colors and should NOT be used anywhere outside of setting default CSS color variables until client-specific colors are applied.</em></p>
	</div>

	<!-- Install & Setup. -->
	<div class="tabs__content">
		<%- include partials/_install.html.ejs %>
	</div>

	<!-- Usage. -->
	<div class="tabs__content">
		<h2 class="font__headline">Usage</h2>
		<h3 class="font__title">Need to know:</h3>
		<ul class="bullets">
			<li><em>Never</em> use the <code>background-color</code> property.</li>
			<li><em>Always</em> use the <code>@include bg($name)</code> mixin.</li>
		</ul>

		<h3 class="font__title">Classes and Helpers</h3>
		<h4 class="font__subheading"><code>c($name)</code></h4>
		<p><em>Type</em>: SASS function</p>
		<p><em>Purpose</em>: Get the color value for <code>$name</code>.</p>
		<p><em>Example</em>:</p>
		<editor lang="scss,css:result">
			<pre>.my-selector {
	border: 1px solid c(dark4);
}</pre>
			<pre>.my-selector {
	border: 1px solid hsl(0, 0%, 0%, 0.12);
}</pre>
		</editor>

		<h4 class="font__subheading"><code>color($name, $level: 1)</code></h4>
		<p><em>Type</em>: SASS function</p>
		<p><em>Purpose</em>:<br>Apply a light or dark color to the <code>color</code> property based on the background color value of <code>$name</code>. In other words, calling <code>color(hsl(0, 0%, 0%), 2)</code> will return the color value for <code>light2</code>.</p>
		<p><em>Example</em>:</p>
		<editor lang="scss,css:result">
			<pre>.my-selector {
	background-color: c(dark);
	border: 1px solid c(dark, 4);
}</pre>
			<pre>.my-selector {
	background-color: hsl(0, 0%, 0%, 0.87);
	border: 1px solid hsl(0, 0%, 0%, 0.12);
}</pre>
		</editor>

		<h4 class="font__subheading"><code>@include bg($name, $level: 1);</code></h4>
		<p><em>Type</em>: SASS mixin</p>
		<p><em>Purpose</em>: Apply <code>background-color</code> and <code>color</code> values to a selector.</p>
		<p><em>Example</em>:</p>
		<editor lang="scss,css:result">
			<pre>.my-selector {
	@include bg(dark, 2);
}</pre>
			<pre>.my-selector {
	background-color: hsl(0, 0%, 0%, 0.87);
	color: hsl(0, 0%, 0%, 0.54);
}</pre>
		</editor>
	</div>

	<!-- Examples. -->
	<!-- <div class="tabs__content" data-ng-class="{'tabs__content--active': pageCtrl.activePageTab === 'examples'}"></div> -->
