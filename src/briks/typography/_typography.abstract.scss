/** ------------------------------------------------------------------------------------------------
 *  _typography.abstract.scss
 *  -------------------------
 *  @author  brikcss  <https://github.com/brikcss>
 *  @description  Typography (font) abstract.
 ** --------------------------------------------------------------------------------------------- */

// -----------
// Font setup.
//
$font__init: true !default;
$font__init-classes: true !default;

// ---------------------
// FONT FACE DEFINITION:
//
// When $font__init is true, each item in the $font__faces variable gets passed to the font-face
// mixin and will create a new @font-face definition. IMPORTANT: To ensure these font faces are
// applied, make sure font files are copied to the corresponding relative paths in the dist
// directory. To disable @font-faces, set this value to `false`.
// prettier-disable-next-line
$font__faces: (
		 ('Roboto', './fonts/Roboto-Regular'),
		 ('Roboto', './fonts/Roboto-Medium', 500),
		 ('Roboto', './fonts/Roboto-Light', 300),
		 ('Roboto Mono', './fonts/RobotoMono-Regular')
	)
	!default;

// -------------------------------------------
// FONT STYLE QUERIES (or font style queries):
//
// Font style queries are an easy way to define and apply responsive typography styles. The
// $font__style-queries variable maps one or more media query breakpoints to the styles for that
// breakpoint. Each font style query must follow this syntax:
//
// (
//     <style-name>: (
//         0: <font-size> <optional line-height> (<optional CSS properties...>),
//         <breakpoint>: <font-size> <optional line-height> (<optional CSS properties...>),
//         ...,
//     )
// )
//
// where:
//
//     - A zero (0) breakpoint is required and listed first.
//     - Breakpoints are listed in ascending order.
//     - `font-size` (required) is the 1st item and must be in pixels.
//     - `line-height` (optional) can optionally be added as the 2nd item, and must be in rems.
//     - the last item is a SASS map of any other CSS properties to be applied.
//
// For example:
//
// body: (
//     0: 14px (font-weight: normal),
//     768: 16px 2rem (font-weight: bold)
// )
//
// The example above applies a 14px font-size, and normal font weight by default (the zero 0 query);
// and applies a 16px font-size, 2rem line-height, and a bold font weight at a min-width of 768px.
// It's worth noting that since the line-height at the zero (0) breakpoint was left out (it is
// optional), it uses the default line-height of 1rem.
//
// stylelint-disable unit-blacklist
$font__style-queries: (
		display4: (0: 112px (font-weight: 300, line-height: 4rem, color: hsla(0, 0%, 0%, 0.54))),
		display3: (0: 56px (line-height: 2rem, color: hsla(0, 0%, 0%, 0.54))),
		display2: (0: 45px (line-height: 2rem, color: hsla(0, 0%, 0%, 0.54))),
		display1: (0: 34px (line-height: 1.5rem, color: hsla(0, 0%, 0%, 0.54))),
		headline: (0: 24px (line-height: 1.5rem)),
		title: (0: 20px (font-weight: 600)),
		subheading: (0: 16px),
		body: (0: 14px (color: hsla(0, 0%, 0%, 0.87), font-family: ('Roboto', sans-serif))),
		bold: (0: 14px (font-weight: 600)),
		button: (0: 14px (font-weight: 600, text-transform: uppercase)),
		caption: (0: 12px (color: hsla(0, 0%, 0%, 0.54)))
	)
	!default;

// $font__base-query is the base query styles which will be set on the body tag if $font__init is
// true. This means all other font styles will inherit these styles. $font__base-query should be
// `map-get($font__style-queries, <style-name>)`, where <style-name> is the name of the style to
// look up in $font__style-queries.
$font__base-query: map-get($font__style-queries, body) !default;

// -------------------
// $font__line-lengths
//
// MD specs state max line lengths should be ~60 characters for body text, or ~30 characters for
// short lines. The $font__line-lengths variable maps selectors to what their max-width should be.
// It is highly recommended to use `ex` units, since these are the best estimate of a single
// charcter (the width of "x"). To disable this feature, set this variable to `false`.
$font__line-lengths: (
	60ex: (p, li),
	40ex: ('.font__short-line')
);
// stylelint-enable unit-blacklist

/**
 *  Apply a font size in ems from a given value which is one of the predefined $font__style-queries
 *  or from a pixel value.
 *
 *  @param   {string|number}  $size  Size to convert to ems. A string will look up the font query
 *      for that given style name. A pixel number will be converted to ems.
 *  @param   {number}  $at:  0  Breakpoint / screen width for the base font size.
 *  @param   {base}  $base-query:  $font__base-query  Base font query styles. You shouldn't need to
 *      modify this.
 *  @return  {number}  Font size value in ems (unless you pass a unit other than pixels, in which
 *      case it will return that value and unit).
 */
@function sp($size, $at: 0, $base-query: $font__base-query) {
	// If $size is a string, look up the value from $sizes.
	@if type-of($size) == string {
		$size: font-query($size, $at);
		$at: map-get(nth($size, length($size)), at);
		$size: nth($size, 1);
	}

	// Get base size.
	$base-size: nth(font-query($base-query, $at), 1);

	// Ensure $size and $base-size are unitless.
	@if unit($size) == px {
		// stylelint-disable unit-blacklist
		$size: $size / 1px;
	} @else {
		// If $size is not in pixels, return it.
		@return $size;
	}
	@if unit($base-size) == px {
		$base-size: $base-size / 1px;
		// stylelint-enable unit-blacklist
	}

	// Return the em value of the pixel $size.
	@return ($size / $base-size) * 1em;
}

/**
 *  Look up a font query for a given breakpoint from a list of font queries.
 *
 *  @param  {string|list}  $base-query  $font__base-query  A string will look up the font style
 *      query from $font__style-queries. It is recommended to always use a string since it utilizes
 *      your predefined list of font styles. However, for flexibility, you may also pass a custom
 *      font styles query.
 *  @param  {number}  $at  0  Breakpoint / screen width for the base font styles.
 *  @return  {list}  Font styles that match given breakpoint.
 */
@function font-query($base-query: $font__base-query, $at: 0) {
	// If $base-query is a string, look up the $query(ies) from $font__style-queries.
	@if type-of($base-query) == string {
		$query-name: $base-query;
		$base-query: map-get($font__style-queries, $query-name);
		@if ($base-query == '') {
			@error '`#{$query-name}` was not found in $font__style-queries.';
		}
	}

	// Validate that $base-query has a 0 breakpoint.
	@if map-get($base-query, 0) == null {
		@if variable-exists(query-name) {
			@error 'Zero breakpoint (0) does not exist in `#{$query-name}` font queries.';
		} @else {
			@error 'Zero breakpoint (0) does not exist in: #{$base-query}';
		}
	}

	// If the list only has a single query, return it.
	@if length($base-query) == 1 {
		@return nth(nth($base-query, 1), 2);
	}

	// Iterate over breakpoints and return the style that matches the $at.
	$n: 1;
	@each $breakpoint, $style in $base-query {
		@if ($n == length($base-query)) or ($at >= $breakpoint and $at < nth(map-keys($base-query), $n + 1)) {
			@if type-of(nth($style, length($style))) == map {
				$style: set-nth(
					$style,
					length($style),
					map-merge(nth($style, length($style)),  (at: $breakpoint))
				);
			} @else {
				$style: append($style,  (at: $breakpoint));
			}
			@debug 'STYLE: #{$style}';
			@return $style;
		}

		$n: $n + 1;
	}
}

/**
 *  Apply base font styles.
 */
@mixin base-fonts() {
	// Include font-face definitions.
	@if $font__faces != false and length($font__faces) > 0 {
		@each $face in $font__faces {
			@include font-face($face...);
		}
	}

	// Include responsive font query styles.
	body {
		// font-family: $font__family;
		@include fonts($font__base-query, true);
	}
}

/**
 *  Apply font styles for a given font style query.
 *
 *  @param   {string|list}  $font-query:  $font__base-query  List of font queries -- or name of list
 *      from $font__style-queries -- to apply styles for.
 *  @param   {boolean}  $px:  false  Whether to apply pixels. Should only be `true` when applying
 *      base font sizes to the body tag.
 */
@mixin fonts($font-query: $font__base-query, $px: false) {
	// If font is a string, look up value from $font__style-queries.
	@if type-of($font-query) == string {
		$font-query: map-get($font__style-queries, $font-query);
	}

	// Apply each style at each given breakpoint.
	@each $breakpoint, $style in $font-query {
		@include font($style, $breakpoint, $px);
	}
}

/**
 *  Apply font styles for all styles and breakpoints in a given font style query.
 *
 *  @param   {string|list}  $query-style  Font styles -- or name of font query from $font__style-queries at
 *      specific $breakpoint -- to apply styles for.
 *  @param   {number}  $at:  0  Breakpoint / screen width for the base font.
 *  @param   {boolean}  $px:  false  Whether to apply pixels. Should only be `true` when applying
 *      base font sizes to the body tag.
 */
@mixin font($query-style, $at: 0, $px: false) {
	// If style is a string, look up value from $font__style-queries.
	@if type-of($query-style) == string {
		$query-style: font-query($query-style, $at);
	}

	// Get breakpoint from $query-style's last option, if the last option is a map.
	$style-options: nth($query-style, length($query-style));
	@if type-of($style-options) == map and map-has-key($style-options, at) {
		$at: map-get($style-options, at);
	}

	// Apply font properties.
	// stylelint-disable-next-line unit-blacklist
	$at: $at * 1px;
	@if $at > 0 {
		@media (min-width: $at) {
			@include _font-properties($query-style, $px);
		}
	} @else {
		@include _font-properties($query-style, $px);
	}
}

/**
 *  INTERNAL: Apply font styles for a given font query style.
 *
 *  @param   {list}  $query-style  Font styles to apply.
 *  @param   {boolean}  $px:  false  Whether to apply pixels. Should only be `true` when applying
 *      base font sizes to the body tag.
 */
@mixin _font-properties($query-style, $px: false) {
	// Validate that $query-style is a space-separated list.
	@if type-of($query-style) != number and type-of($query-style) == list and list-separator($query-style) != space {
		@error '`#{$query-style}` must be a number or a space-delimited list.';
	}

	// Apply font-size.
	$font-size: nth($query-style, 1);
	@if unit($font-size) == px {
		@if $px == true {
			font-size: $font-size;
		} @else {
			font-size: sp($font-size);
		}
	} @else {
		font-size: $font-size;
	}

	// Apply line-height, if exists.
	@if length($query-style) > 1 and type-of(nth($query-style, 2)) == number {
		@if unit(nth($query-style, 2)) != rem {
			@warn 'Unit for line-height value: #{nth($query-style, 2)} is not rems. It is strongly encouraged to use rems.';
		}
		line-height: nth($query-style, 2);
	}

	// Apply other CSS properties.
	$query-style-last-arg: nth($query-style, length($query-style));
	@if type-of($query-style-last-arg) == map {
		@each $property, $value in $query-style-last-arg {
			@if ($property != at) {
				#{$property}: $value;
			}
		}
	}
}

/**
 *  Apply class selectors for all font queries in a given font queries map.
 *
 *  @param   {map}  $font-queries:  $font__style-queries  Font queries map, formatted like $font__style-queries.
 */
@mixin font-classes($font-queries: $font__style-queries) {
	@each $class-name, $class-queries in $font-queries {
		@each $bp, $query in $class-queries {
			.font__#{$class-name} {
				@include fonts($class-queries, $bp);
			}
		}
	}
}

/**
 *  Apply a custom font face.
 *
 *  @param   {string}  $name  Name you want to refer to font face as.
 *  @param   {string}  $path  Directory of font file.
 *  @param   {number|string}  $weight:  400  Font weight.
 *  @param   {string}  $style:  normal  Font style.
 */
@mixin font-face($name, $path, $weight: 400, $style: normal) {
	@font-face {
		font-family: $name;
		font-style: $style;
		// font-display: swap;
		font-weight: $weight;
		// NOTE: The local smiley font face follows Paul Irish's bulletproof syntax, which cites issues
		// with specifying local font names. See:
		// https://www.paulirish.com/2009/bulletproof-font-face-implementation-syntax/.
		src: url('#{$path}.woff2') format('woff2'), url('#{$path}.woff') format('woff'),
			url('#{$path}.ttf') format('truetype');
	}
}

/**
 *  Applies a max-width $value to each $selector in the $map. This limits the length a line can be,
 *  which helps to follow MD typography specifications.
 *
 *  @param   {map}  $map:  $font__line-lengths  Map key is $value and map value is $selectors to
 *      apply a max-width $value to.
 */
@mixin font-line-lengths($map: $font__line-lengths) {
	@each $value, $selectors in $map {
		@for $i from 1 through length($selectors) {
			#{nth($selectors, $i)} {
				max-width: $value;
			}
		}
	}
}
