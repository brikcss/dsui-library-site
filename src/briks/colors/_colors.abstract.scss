/** ------------------------------------------------------------------------------------------------
 *  @filename  _colors.abstract.scss
 *  @author  brikcss  <https://github.com/brikcss>
 ** --------------------------------------------------------------------------------------------- */

// @todo: Implement client colors polyfill: https://codepen.io/aaronbarker/pen/MeaRmL?

// -------------
// Colors setup.
//
$colors__init: true !default;
// $colors__init-md: Adds MD base colors to list of $colors.
$colors__init-md: false !default;

// $colors__lightness-threshold: The color() function will return a light or dark color value based
// on this lightness threshold of the inverse background color.
$colors__lightness-threshold: 50 !default;
// $colors__opacity-threshold: If the opacity of the background color is below this value, the
// color() function will return the inverse's opposite value (light/dark). Set to 1 to disable.
$colors__opacity-threshold: 0.5 !default;

// $colors: Maps names to hsl color values.
$colors: (
		dark: hsla(0, 0%, 0%, 0.87),
		dark1: hsla(0, 0%, 0%, 0.87),
		dark2: hsla(0, 0%, 0%, 0.54),
		dark3: hsla(0, 0%, 0%, 0.38),
		dark4: hsla(0, 0%, 0%, 0.12),
		light: hsla(0, 0%, 100%, 1),
		light1: hsla(0, 0%, 100%, 1),
		light2: hsla(0, 0%, 100%, 0.7),
		light3: hsla(0, 0%, 100%, 0.5),
		light4: hsla(0, 0%, 100%, 0.12),
		superbar: hsl(209, 24%, 30%),
		superbar-icon: hsl(208, 11%, 65%),
		gray: hsl(0, 0%, 90%)
	)
	!default;

// $colors__vars: Colors that are set as native CSS variables on the :root element. Set this to an
// empty map to disable. Each color is a list of two items where item1 is the color value and item2
// is the text color that should be applied when the main value is applied as a background.
$colors__vars: (
		color1: hsl(194, 76%, 65%) light,
		color2: hsl(69, 67%, 51%) light,
		color3: hsl(36, 96%, 54%) light,
		color4: hsl(205, 7%, 45%) light
	)
	!default;

// @colors__bg-classes: A `background-color` class will be added for each of these.
$colors__bg-classes: join(map-keys($colors), map-keys($colors__vars)) !default;

// @colors__color-classes: A text `color` class will be added for each of these.
$colors__color-classes: join(map-keys($colors), map-keys($colors__vars)) !default;

// $colors__md: Map of Material Design base colors.
$colors__md: (
	red: hsl(4, 90%, 58%),
	pink: hsl(340, 82%, 52%),
	purple: hsl(291, 64%, 42%),
	deep-purple: hsl(262, 52%, 47%),
	indigo: hsl(231, 48%, 48%),
	blue: hsl(207, 90%, 54%),
	light-blue: hsl(199, 98%, 48%),
	cyan: hsl(187, 100%, 42%),
	teal: hsl(174, 100%, 29%),
	green: hsl(122, 39%, 49%),
	light-green: hsl(88, 50%, 53%),
	lime: hsl(66, 70%, 54%),
	yellow: hsl(54, 100%, 62%),
	amber: hsl(45, 100%, 51%),
	orange: hsl(36, 100%, 50%),
	deep-orange: hsl(14, 100%, 57%),
	brown: hsl(16, 25%, 38%),
	gray: hsl(0, 0%, 62%),
	blue-gray: hsl(200, 18%, 46%),
	black: hsl(0, 0%, 0%),
	white: hsl(0, 0%, 100%)
);

// If $colors__init and $colors__init-md are true, add material design base colors to the $colors
// map.
@if ($colors__init == true) and ($colors__init-md == true) {
	$colors: join($colors, $colors__md);
}

// $colors__body:
// If $colors__init is true, this color is assigned to the body tag's color property. It should be a
// map-get function which looks up a color in the $colors map.
$colors__body: map-get($colors, dark) !default;

/**
 *  Helper function which looks up a color from $colors__vars or $colors maps.
 *
 *  @param   {string}  $name  Name of color to look up.
 *  @return  {color}  Color value of the color $name.
 */
@function c($name) {
	@if type-of($name) == string and str-index($name, var) == 1 {
		@return $name;
	}
	@if map-has-key($colors__vars, $name) {
		@return var(--#{$name});
	}
	@if map-has-key($colors, $name) {
		@return map-get($colors, $name);
	}
	@return $name;
}

/**
 *  Apply a light or dark text color value based on a given background color.
 *
 *  @param   {color|string}  $bg  Background color the text color will be on.
 *  @param   {number}  $level:  1  Level of light/dark value to look up. For example, if $level is
 *      2, return value will be the light2 or dark2 value from the $colors map.
 *  @return  {color}  Will return value of the map item called light + <level> or dark + <level>.
 */
@function color($bg, $level: 1) {
	$keyword: dark;
	// Allow $bg to be a string, which will call c($bg).
	@if type-of($bg) == string {
		// If $bg is a var(--<var>) string, grab the string value.
		@if str-index($bg, var) == 1 {
			$bg: str-slice($bg, 7, -2);
		}
		// If $bg exists in $colors__vars, grab the color value.
		@if map-has-key($colors__vars, $bg) {
			@if length(map-get($colors__vars, $bg)) > 1 {
				$keyword: nth(map-get($colors__vars, $bg), 2);
			} @else {
				$keyword: light;
			}
		}
		// If $bg exists in $colors, grab the color value.
		@else if map-has-key($colors, $bg) {
			$bg: map-get($colors, $bg);
		}
		// Default color (if $bg is a string) is light.
		@else {
			$keyword: light;
		}
	}
	// If $bg is a color, return light/dark color based on $bg lightness.
	@if type-of($bg) == color {
		$opacity: opacity($bg);

		@if lightness($bg) <= $colors__lightness-threshold {
			$keyword: light;
		} @else {
			$keyword: dark;
		}
		@if $opacity <= $colors__opacity-threshold {
			@if $keyword == light {
				$keyword: dark;
			} @else {
				$keyword: light;
			}
		}
	}
	// Look up the color in $colors.
	@if map-has-key($colors, $keyword + $level) {
		@return map-get($colors, $keyword + $level);
	} @else if map-has-key($colors, $keyword) {
		@return map-get($colors, $keyword);
	} @else if $keyword == light {
		@return hsla(0, 0%, 100%, 1);
	} @else if $keyword == dark {
		@return hsla(0, 0%, 0%, 0.87);
	}
}

/**
 *  Apply background-color and color properties. Should replace any usage of background-color in app
 *  code.
 *
 *  @param   {color|string}  $bg  Background color.
 *  @param   {number}  $level:  1  Level of light/dark value to look up. For example, if $level is
 *      2, return value will be the light2 or dark2 value from the $colors map.
 */
@mixin bg($bg, $level: 1) {
	background-color: c($bg);
	color: color($bg, $level);
}
