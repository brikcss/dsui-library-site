/** ------------------------------------------------------------------------------------------------
 *  @filename  _config.scss
 *  @author  brikcss  <https://github.com/brikcss>
 *  @description  SASS configuration for DS UI site.
 ** --------------------------------------------------------------------------------------------- */
/** ------------------------------------------------------------------------------------------------
 *  @filename  _colors.abstract.scss
 *  @author  brikcss  <https://github.com/brikcss>
 ** --------------------------------------------------------------------------------------------- */
/**
 *  Helper function which looks up a color from $colors__vars or $colors maps.
 *
 *  @param   {string}  $name  Name of color to look up.
 *  @return  {color}  Color value of the color $name.
 */
/**
 *  Apply a light or dark text color value based on a given background color.
 *
 *  @param   {color|string}  $bg  Background color the text color will be on.
 *  @param   {number}  $level:  1  Level of light/dark value to look up. For example, if $level is
 *      2, return value will be the light2 or dark2 value from the $colors map.
 *  @return  {color}  Will return value of the map item called light + <level> or dark + <level>.
 */
/**
 *  Apply background-color and color properties. Should replace any usage of background-color in app
 *  code.
 *
 *  @param   {color|string}  $bg  Background color.
 *  @param   {number}  $level:  1  Level of light/dark value to look up. For example, if $level is
 *      2, return value will be the light2 or dark2 value from the $colors map.
 */
/** ------------------------------------------------------------------------------------------------
 *  @filename  _rhythm.abstract.scss
 *  @author  brikcss  <https://github.com/brikcss>
 *  @description  Allows us to easily create and manage a repeatable dimensional rhythm (see
 *      https://webdesign.tutsplus.com/articles/improving-layout-with-vertical-rhythm--webdesign-14070).
 *
 *  @tutorial  These concepts are based on a "vertical" rhythm, but apply to horizontal dimensions
 *      as well. It is extremely important to follow these rules in order to keep the grid "in
 *      rhythm".
 *      - Definitions:
 *          - List of "dimensional properties": height, width, margin, padding, line-height, border.
 *          - 1rem = 1 vertical line unit.
 *          - 1em = 1 base font size unit.
 *      - Rules:
 *          - ALWAYS use `rem` units for dimensional properties.
 *          - ALWAYS use `em` units for the `font-size` property.
 *          - Whole numbers should be **highly** favored when applying `rem` units.
 *          - If desired, fractional numbers may be applied, but **only** in divisions of two (2).
 *            In other words, a `rem` unit can be applied in fractional divisions of 2, 4, 8, 16,
 *            etc. However, it is strongly discouraged to apply fractional numbers in divisions of
 *            more than 4. To illustrate:
 *              ```
 *              1rem // Whole numbers should be **highly** favored.
 *              3.5rem // Acceptable, division of 2.
 *              10.25rem // Acceptable, division of 4.
 *              10.33rem // Unacceptable, division of 3. Fractionals must be in divisions of 2.
 *              10.634574rem // Unacceptable, fractional numbers must be divisions of 2.
 *              10.125rem // Acceptable but discouraged, since division of 8 is > division of 4.
 *              ```
 *          - There may be cases where it is necessary to break the rules above and apply a
 *            dimension that throws the grid out of rhythm. Examples might be an element
 *            that needs a 1px border, or an image that must have a certain pixel height. In such
 *            cases, follow these guidelines:
 *              - First, avoid doing so if at all possible. Use proper rem values wherever possible
 *                as it simplifies managing the grid.
 *              - If breaking the rules is necessary, apply this rule to ensure the grid
 *                stays in rhythm: The sum of all "dimensional properties" (which are listed above)
 *                must equal a whole rem unit.
 *              - Examples where it might be necessary to break the rules and how the above rule
 *                might be applied:
 *                  ```
 *                  // The border for this element absolutely must be 1px.
 *                  .pixel-border {
 *                      border: 1px solid hsl(0, 0, 80%);
 *                      // Bring back into rhythm with the `calc()` function:
 *                      // height = 3rem minus 1px for top border and 1px for bottom border.
 *                      height: calc(3rem - 2px);
 *                  }
 *
 *                  // This image must be 300px tall. To ensure the element stays in rhythm, a
 *                  // margin (or padding) can be applied to bring the sum of height + margin = the
 *                  // value of a whole number rem unit. Let's assume that a vertical line is 32px.
 *                  // A height of 300px (which is 9.375rem in a 32px rhythm) + (0.3125rem * 2)
 *                  // equals 10rem. With a 300px tall image, we're still "in rhythm"!
 *                  .pixel-image {
 *                      height: 300px;
 *                      margin-bottom: 0.3125rem;
 *                      margin-top: 0.3125rem;
 *                  }
 *                  ```
 ** --------------------------------------------------------------------------------------------- */
/**
 *  Look up rhythm value at a given breakpoint.
 *
 *  @param   {number}  $at:  nth(nth($rhythm__queries, 1), 2)  Breakpoint to look up.
 *  @param   {string}  $property  line-height  Rhythm property to look up (line-height|font-size).
 *  @param   {map}  $rhythms:  $rhythm__queries  List of rhythm queries to be searched.
 *  @return  {number}  $property at given $at width from map of $rhythms.
 */
/**
 *  Convert px to rem value.
 *
 *  @param   {number}  $px:  1  Pixel value to convert to rems.
 *  @param   {number}  $at:  0  Breakpoint to look up.
 *  @param   {map}  $rhythms:  $rhythm__queries  List of rhythm queries to be searched.
 *  @return  {number}  Value in rems.
 */
/**
 *  Apply multiple rhythm values at a set of given breakpoints.
 *
 *  @param  {map}  $rhythms: $rhythm__queries  Map of rhythm breakpoints and values.
 */
/**
 *  Apply rhythm to the html element (or optionally to your own selector).
 *
 *  @param  {number}  $rhythm: px-rhythm(0)  Pixel value of rhythm to be applied.
 *  @param  {number}  $at: 0  Pixel value of breakpoint to apply rhythm at.
 *  @param  {number}  $line-height: $rhythm__line-height  Rem value of default line-height.
 *  @param  {boolean}  $tags: true  Whether to apply rhythm to the html tag.
 */
/**
 *  Styles for a rhythm grid.
 *
 *  @param  {color}  $bg: hsla(0, 0%, 0%, 0.1)  Background color.
 *  @param  {number}  $size: 1rem  Size of grid.
 *  @param  {boolean}  $double: true  Double the grid lines and add 50% stops that are lighter.
 */
/** ------------------------------------------------------------------------------------------------
 *  @filename  _typography.abstract.scss
 *  @author  brikcss  <https://github.com/brikcss>
 *  @dependencies  core/colors.abstract
 ** --------------------------------------------------------------------------------------------- */
/**
 *  Apply a font size in ems from a given value which is one of the predefined $font__style-queries
 *  or from a pixel value.
 *
 *  @param   {string|number|list}  $size  Size to convert to ems. A string will look up the font
 *      query for that given style name. $size can also be a list of two values, where the first
 *      value is $size and the second value is the size of its relative parent. The second value is
 *      'body' by default, and is used as the base em size in converting $size to ems.
 *  @param   {number}  $at:  0  Breakpoint / screen width for the base font size.
 *  @param   {base}  $base-query:  $font__base-query  Base font query styles. You shouldn't need to
 *      modify this.
 *  @return  {number}  Font size value in ems (unless you pass a unit other than pixels, in which
 *      case it will return that value and unit).
 */
/**
 *  Look up a font query for a given breakpoint from a list of font queries.
 *
 *  @param  {string|list}  $base-query  $font__base-query  A string will look up the font style
 *      query from $font__style-queries. It is recommended to always use a string since it utilizes
 *      your predefined list of font styles. However, for flexibility, you may also pass a custom
 *      font styles query.
 *  @param  {number}  $at  0  Breakpoint / screen width for the base font styles.
 *  @return  {list}  Font styles that match given breakpoint.
 */
/**
 *  Apply base font styles.
 */
/**
 *  Apply all font styles at breakpoints in a given font styles query.
 *
 *  @param   {string|list}  $font-query:  $font__base-query  List of font queries -- or name of list
 *      from $font__style-queries -- to apply styles for.
 *  @param   {boolean}  $px:  false  Whether to apply pixels. Should only be `true` when applying
 *      base font sizes to the body tag.
 *  @param   {string}  $size-only:  false  Whether to apply font-size or all font style properties.
 */
/**
 *  INTERNAL: Apply a font style at a given breakpoint.
 *
 *  @param   {string|list}  $query-style  Font styles -- or name of font query from $font__style-queries at
 *      specific $breakpoint -- to apply styles for.
 *  @param   {number}  $at:  0  Breakpoint / screen width for the base font.
 *  @param   {boolean}  $px:  false  Whether to apply pixels. Should only be `true` when applying
 *      base font sizes to the body tag.
 *  @param   {string}  $size-only:  false  Whether to apply font-size or all font style properties.
 */
/**
 *  INTERNAL: Apply font styles for a given font query style.
 *
 *  @param   {list}  $query-style  Font styles to apply.
 *  @param   {boolean}  $px:  false  Whether to apply pixels. Should only be `true` when applying
 *      base font sizes to the body tag.
 *  @param   {string}  $size-only:  false  Whether to apply font-size or all font style properties.
 */
/**
 *  Apply class selectors for all font queries in a given font queries map.
 *
 *  @param   {map}  $font-queries:  $font__style-queries  Font queries map, formatted like $font__style-queries.
 */
/**
 *  Apply a custom font face.
 *
 *  @param   {string}  $name  Name you want to refer to font face as.
 *  @param   {string}  $path  Directory of font file.
 *  @param   {number|string}  $weight:  400  Font weight.
 *  @param   {string}  $style:  normal  Font style.
 */
/**
 *  Applies a max-width $value to each $selector in the $map. This limits the length a line can be,
 *  which helps to follow MD typography specifications.
 *
 *  @param   {map}  $map:  $font__line-lengths  Map key is $value and map value is $selectors to
 *      apply a max-width $value to.
 */
/** ------------------------------------------------------------------------------------------------
 *  @filename  spinner.abstract.scss
 *  @author  brikcss  <https://github.com/brikcss>
 *  @description  SASS for Brikcss Spinner.
 *  @notes  This currently uses the `clip` property, which is deprecated but supported. When a new
 *      browser discontinues support for that, we will need to do one of the following:
 *        1. Use the `clip-path` property instead.
 *        2. Remove `clip`. Instead make borders for of __left and __right :after pseudo elements
 *           transparent on two sides and make sure the parent has `overflow: hidden`.
 *  @credit  Thanks to the following for guidance and inspiration:
 *        - [Andre Firchow - CSS Percentage Circles](http://circle.firchow.net/)
 *        - [Codepen user Misiu](https://codepen.io/Misiu/pen/MpZvNK)
 *        - [Material Design](https://material.io/guidelines/components/progress-activity.html)
 ** --------------------------------------------------------------------------------------------- */
/**
 *  Merge given options with default options.
 *  @param   {Map}  $options:  ()  Options map.
 */
/**
 *  Test whether a mod name is equal to or contained in a string or list of mods.
 *
 *  @param   {String}  $mod  Value to test.
 *  @param   {String|List}  $mods  List of mods to check.
 */
/**
 *  Include styles for one or more spinner mod(s).
 *
 *  @param   {String|List}  $mods  Name(s) of mod(s) to include.
 *  @param   {Map}  $options:  ()  Options map.
 */
/**
 *  Include spinner styles for a default type and optionally add modifier classes.
 *
 *  @param   {List}  $type:  ()  Mod types to include as default styles.
 *  @param   {List}  $mods:  $spinner__mods  List of mods to add modifier classes for.
 *  @param   {Boolean}  $add-base:  false  Add base spinner styles. If no types are set,
 *      automatically set to true.
 *  @param   {Boolean}  $add-animation:  false  Add animation styles. Should typically only be added
 *      once. If no types are set, automatically set to true.
 *  @param   {Map}  $options:  ()  Options map.
 */
/** ------------------------------------------------------------------------------------------------
 *  @filename  burger-button.scss
 *  @author  brikcss  <https://github.com/brikcss>
 *  @dependencies  core/colors.abstract
 *  @todo  Add media query for $burger-hide-at value.
 ** --------------------------------------------------------------------------------------------- */
/** Burger mixin. */
/** ------------------------------------------------------------------------------------------------
 *  @filename  elevation.abstract.scss
 *  @author  brikcss  <https://github.com/brikcss>
 *  @description  Elevation helpers.
 ** --------------------------------------------------------------------------------------------- */
/**
 *  Elevation drop shadow.
 *
 *  @param   {number}  $level:  1  Elevation level.
 *  @param   {number}  $opacity-multiplier:  1  Opacity multiplier.
 */
/**
 *  Apply z-index.
 *
 *  @param   {number}  $level:  1  Elevation level.
 *  @param   {number}  $zindex-modifier:  0  Modifies final z-index number.
 */
/**
 *  Elevate. Applies both drop shadow and z-index mixins.
 *
 *  @param   {number}  $level:  1  Elevation level.
 *  @param   {number}  $zindex-modifier:  0  Modifies final z-index number.
 *  @param   {number}  $opacity-multiplier:  1  Opacity multiplier.
 */
/** ------------------------------------------------------------------------------------------------
 *  @filename  _footer.abstract.scss
 *  @author  brikcss  <https://github.com/brikcss>
 *  @dependencies  core/colors.abstract
 ** --------------------------------------------------------------------------------------------- */
/**
 *  Global footer element.
 *
 *  @param   {number}  $height:  $footer__height  Height.
 *  @param   {number|list}  $padding:  $footer__padding  Padding.
 *  @param   {color}  $bg:  $footer__bg  Background color.
 */
/** ------------------------------------------------------------------------------------------------
 *  @filename  header.scss
 *  @author  brikcss  <https://github.com/brikcss>
 *  @dependencies  core/colors.abstract
 ** --------------------------------------------------------------------------------------------- */
/**
 *  Create page header.
 */
/** ------------------------------------------------------------------------------------------------
 *  @filename  _show-hide.abstract.scss
 *  @author  brikcss  <https://github.com/brikcss>
 *  @dependencies  core/rhythm.abstract
 ** --------------------------------------------------------------------------------------------- */
/**
 *  Show hide element.
 */
/** ------------------------------------------------------------------------------------------------
 *  @filename  _sidebars.abstract.scss
 *  @author  brikcss  <https://github.com/brikcss>
 *  @description  Sidebars brik adds a left and/or right sidebar to a view.
 *  @dependencies  core/rhythm.abstract
 ** --------------------------------------------------------------------------------------------- */
/**
 *  Create a left or right sidebar.
 *
 *  @param   {number}  $width:  $sidebar__width  Width of sidebar.
 *  @param   {string}  $side:  left|right  Left or right sidebar.
 *  @param   {number|boolean}  $pin-at:  false  Min-width value to "pin" sidebar at. `true` will
 *      make it always pinned.
 *  @param   {boolean}  $push-content:  true  Whether sidebar should "push" content when opening
 *      from off-canvas.
 */
/** ------------------------------------------------------------------------------------------------
 *  @filename  index.scss
 *  @author  brikcss  <https://github.com/brikcss>
 *  @description  Import file for @brikcss/core.
 ** --------------------------------------------------------------------------------------------- */
/** ------------------------------------------------------------------------------------------------
 *  @filename  _rhythm.abstract.scss
 *  @author  brikcss  <https://github.com/brikcss>
 *  @description  Allows us to easily create and manage a repeatable dimensional rhythm (see
 *      https://webdesign.tutsplus.com/articles/improving-layout-with-vertical-rhythm--webdesign-14070).
 *
 *  @tutorial  These concepts are based on a "vertical" rhythm, but apply to horizontal dimensions
 *      as well. It is extremely important to follow these rules in order to keep the grid "in
 *      rhythm".
 *      - Definitions:
 *          - List of "dimensional properties": height, width, margin, padding, line-height, border.
 *          - 1rem = 1 vertical line unit.
 *          - 1em = 1 base font size unit.
 *      - Rules:
 *          - ALWAYS use `rem` units for dimensional properties.
 *          - ALWAYS use `em` units for the `font-size` property.
 *          - Whole numbers should be **highly** favored when applying `rem` units.
 *          - If desired, fractional numbers may be applied, but **only** in divisions of two (2).
 *            In other words, a `rem` unit can be applied in fractional divisions of 2, 4, 8, 16,
 *            etc. However, it is strongly discouraged to apply fractional numbers in divisions of
 *            more than 4. To illustrate:
 *              ```
 *              1rem // Whole numbers should be **highly** favored.
 *              3.5rem // Acceptable, division of 2.
 *              10.25rem // Acceptable, division of 4.
 *              10.33rem // Unacceptable, division of 3. Fractionals must be in divisions of 2.
 *              10.634574rem // Unacceptable, fractional numbers must be divisions of 2.
 *              10.125rem // Acceptable but discouraged, since division of 8 is > division of 4.
 *              ```
 *          - There may be cases where it is necessary to break the rules above and apply a
 *            dimension that throws the grid out of rhythm. Examples might be an element
 *            that needs a 1px border, or an image that must have a certain pixel height. In such
 *            cases, follow these guidelines:
 *              - First, avoid doing so if at all possible. Use proper rem values wherever possible
 *                as it simplifies managing the grid.
 *              - If breaking the rules is necessary, apply this rule to ensure the grid
 *                stays in rhythm: The sum of all "dimensional properties" (which are listed above)
 *                must equal a whole rem unit.
 *              - Examples where it might be necessary to break the rules and how the above rule
 *                might be applied:
 *                  ```
 *                  // The border for this element absolutely must be 1px.
 *                  .pixel-border {
 *                      border: 1px solid hsl(0, 0, 80%);
 *                      // Bring back into rhythm with the `calc()` function:
 *                      // height = 3rem minus 1px for top border and 1px for bottom border.
 *                      height: calc(3rem - 2px);
 *                  }
 *
 *                  // This image must be 300px tall. To ensure the element stays in rhythm, a
 *                  // margin (or padding) can be applied to bring the sum of height + margin = the
 *                  // value of a whole number rem unit. Let's assume that a vertical line is 32px.
 *                  // A height of 300px (which is 9.375rem in a 32px rhythm) + (0.3125rem * 2)
 *                  // equals 10rem. With a 300px tall image, we're still "in rhythm"!
 *                  .pixel-image {
 *                      height: 300px;
 *                      margin-bottom: 0.3125rem;
 *                      margin-top: 0.3125rem;
 *                  }
 *                  ```
 ** --------------------------------------------------------------------------------------------- */
/**
 *  Look up rhythm value at a given breakpoint.
 *
 *  @param   {number}  $at:  nth(nth($rhythm__queries, 1), 2)  Breakpoint to look up.
 *  @param   {string}  $property  line-height  Rhythm property to look up (line-height|font-size).
 *  @param   {map}  $rhythms:  $rhythm__queries  List of rhythm queries to be searched.
 *  @return  {number}  $property at given $at width from map of $rhythms.
 */
/**
 *  Convert px to rem value.
 *
 *  @param   {number}  $px:  1  Pixel value to convert to rems.
 *  @param   {number}  $at:  0  Breakpoint to look up.
 *  @param   {map}  $rhythms:  $rhythm__queries  List of rhythm queries to be searched.
 *  @return  {number}  Value in rems.
 */
/**
 *  Apply multiple rhythm values at a set of given breakpoints.
 *
 *  @param  {map}  $rhythms: $rhythm__queries  Map of rhythm breakpoints and values.
 */
/**
 *  Apply rhythm to the html element (or optionally to your own selector).
 *
 *  @param  {number}  $rhythm: px-rhythm(0)  Pixel value of rhythm to be applied.
 *  @param  {number}  $at: 0  Pixel value of breakpoint to apply rhythm at.
 *  @param  {number}  $line-height: $rhythm__line-height  Rem value of default line-height.
 *  @param  {boolean}  $tags: true  Whether to apply rhythm to the html tag.
 */
/**
 *  Styles for a rhythm grid.
 *
 *  @param  {color}  $bg: hsla(0, 0%, 0%, 0.1)  Background color.
 *  @param  {number}  $size: 1rem  Size of grid.
 *  @param  {boolean}  $double: true  Double the grid lines and add 50% stops that are lighter.
 */
/** ------------------------------------------------------------------------------------------------
 *  @filename  _colors.abstract.scss
 *  @author  brikcss  <https://github.com/brikcss>
 ** --------------------------------------------------------------------------------------------- */
/**
 *  Helper function which looks up a color from $colors__vars or $colors maps.
 *
 *  @param   {string}  $name  Name of color to look up.
 *  @return  {color}  Color value of the color $name.
 */
/**
 *  Apply a light or dark text color value based on a given background color.
 *
 *  @param   {color|string}  $bg  Background color the text color will be on.
 *  @param   {number}  $level:  1  Level of light/dark value to look up. For example, if $level is
 *      2, return value will be the light2 or dark2 value from the $colors map.
 *  @return  {color}  Will return value of the map item called light + <level> or dark + <level>.
 */
/**
 *  Apply background-color and color properties. Should replace any usage of background-color in app
 *  code.
 *
 *  @param   {color|string}  $bg  Background color.
 *  @param   {number}  $level:  1  Level of light/dark value to look up. For example, if $level is
 *      2, return value will be the light2 or dark2 value from the $colors map.
 */
/** ------------------------------------------------------------------------------------------------
 *  @filename  _typography.abstract.scss
 *  @author  brikcss  <https://github.com/brikcss>
 *  @dependencies  core/colors.abstract
 ** --------------------------------------------------------------------------------------------- */
/**
 *  Apply a font size in ems from a given value which is one of the predefined $font__style-queries
 *  or from a pixel value.
 *
 *  @param   {string|number|list}  $size  Size to convert to ems. A string will look up the font
 *      query for that given style name. $size can also be a list of two values, where the first
 *      value is $size and the second value is the size of its relative parent. The second value is
 *      'body' by default, and is used as the base em size in converting $size to ems.
 *  @param   {number}  $at:  0  Breakpoint / screen width for the base font size.
 *  @param   {base}  $base-query:  $font__base-query  Base font query styles. You shouldn't need to
 *      modify this.
 *  @return  {number}  Font size value in ems (unless you pass a unit other than pixels, in which
 *      case it will return that value and unit).
 */
/**
 *  Look up a font query for a given breakpoint from a list of font queries.
 *
 *  @param  {string|list}  $base-query  $font__base-query  A string will look up the font style
 *      query from $font__style-queries. It is recommended to always use a string since it utilizes
 *      your predefined list of font styles. However, for flexibility, you may also pass a custom
 *      font styles query.
 *  @param  {number}  $at  0  Breakpoint / screen width for the base font styles.
 *  @return  {list}  Font styles that match given breakpoint.
 */
/**
 *  Apply base font styles.
 */
/**
 *  Apply all font styles at breakpoints in a given font styles query.
 *
 *  @param   {string|list}  $font-query:  $font__base-query  List of font queries -- or name of list
 *      from $font__style-queries -- to apply styles for.
 *  @param   {boolean}  $px:  false  Whether to apply pixels. Should only be `true` when applying
 *      base font sizes to the body tag.
 *  @param   {string}  $size-only:  false  Whether to apply font-size or all font style properties.
 */
/**
 *  INTERNAL: Apply a font style at a given breakpoint.
 *
 *  @param   {string|list}  $query-style  Font styles -- or name of font query from $font__style-queries at
 *      specific $breakpoint -- to apply styles for.
 *  @param   {number}  $at:  0  Breakpoint / screen width for the base font.
 *  @param   {boolean}  $px:  false  Whether to apply pixels. Should only be `true` when applying
 *      base font sizes to the body tag.
 *  @param   {string}  $size-only:  false  Whether to apply font-size or all font style properties.
 */
/**
 *  INTERNAL: Apply font styles for a given font query style.
 *
 *  @param   {list}  $query-style  Font styles to apply.
 *  @param   {boolean}  $px:  false  Whether to apply pixels. Should only be `true` when applying
 *      base font sizes to the body tag.
 *  @param   {string}  $size-only:  false  Whether to apply font-size or all font style properties.
 */
/**
 *  Apply class selectors for all font queries in a given font queries map.
 *
 *  @param   {map}  $font-queries:  $font__style-queries  Font queries map, formatted like $font__style-queries.
 */
/**
 *  Apply a custom font face.
 *
 *  @param   {string}  $name  Name you want to refer to font face as.
 *  @param   {string}  $path  Directory of font file.
 *  @param   {number|string}  $weight:  400  Font weight.
 *  @param   {string}  $style:  normal  Font style.
 */
/**
 *  Applies a max-width $value to each $selector in the $map. This limits the length a line can be,
 *  which helps to follow MD typography specifications.
 *
 *  @param   {map}  $map:  $font__line-lengths  Map key is $value and map value is $selectors to
 *      apply a max-width $value to.
 */
/** ------------------------------------------------------------------------------------------------
 *  @filename  _browser-reset.init.css
 *  @author  brikcss  <https://github.com/brikcss>
 *  @description  Brikcss CSS browser reset.
 *  @dependencies  None.
 ** --------------------------------------------------------------------------------------------- */
/* stylelint-disable selector-max-type */
/* line 9, node_modules/@brikcss/core/dist/sass/browser-reset/_browser-reset.init.css */
html,
body,
div,
span,
object,
iframe,
h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote,
pre,
abbr,
code,
em,
img,
small,
strong,
sub,
sup,
ol,
ul,
li,
fieldset,
form,
label,
legend,
table,
tbody,
tfoot,
thead,
tr,
th,
td,
article,
aside,
footer,
header,
nav,
section,
time,
audio,
video {
	padding: 0;
	border: 0;
	margin: 0;
	background: transparent;
	/* stylelint-disable-next-line */
	font-size: 100%;
	font-weight: inherit;
	vertical-align: baseline;
}

/* line 65, node_modules/@brikcss/core/dist/sass/browser-reset/_browser-reset.init.css */
article,
aside,
figure,
footer,
header,
nav,
section {
	display: block;
}

/* line 75, node_modules/@brikcss/core/dist/sass/browser-reset/_browser-reset.init.css */
html {
	-webkit-box-sizing: border-box;
	box-sizing: border-box;
	overflow-y: scroll;
}

/* stylelint-disable selector-max-universal */
/* line 81, node_modules/@brikcss/core/dist/sass/browser-reset/_browser-reset.init.css */
*,
*:before,
*:after {
	-webkit-box-sizing: inherit;
	box-sizing: inherit;
}

/* stylelint-enable selector-max-universal */
/* line 88, node_modules/@brikcss/core/dist/sass/browser-reset/_browser-reset.init.css */
img,
object {
	max-width: 100%;
}

/* line 93, node_modules/@brikcss/core/dist/sass/browser-reset/_browser-reset.init.css */
ul {
	list-style: none;
}

/* line 97, node_modules/@brikcss/core/dist/sass/browser-reset/_browser-reset.init.css */
table {
	border-collapse: collapse;
	border-spacing: 0;
}

/* line 102, node_modules/@brikcss/core/dist/sass/browser-reset/_browser-reset.init.css */
th {
	font-weight: bold;
	vertical-align: bottom;
}

/* line 107, node_modules/@brikcss/core/dist/sass/browser-reset/_browser-reset.init.css */
td {
	font-weight: normal;
	vertical-align: top;
}

/* line 112, node_modules/@brikcss/core/dist/sass/browser-reset/_browser-reset.init.css */
input,
select {
	vertical-align: middle;
}

/* stylelint-disable selector-no-qualifying-type */
/* line 118, node_modules/@brikcss/core/dist/sass/browser-reset/_browser-reset.init.css */
input[type='radio'] {
	vertical-align: text-bottom;
}

/* line 122, node_modules/@brikcss/core/dist/sass/browser-reset/_browser-reset.init.css */
input[type='checkbox'] {
	vertical-align: bottom;
}

/* line 126, node_modules/@brikcss/core/dist/sass/browser-reset/_browser-reset.init.css */
strong {
	font-weight: bold;
}

/* line 130, node_modules/@brikcss/core/dist/sass/browser-reset/_browser-reset.init.css */
label,
input[type='file'] {
	cursor: pointer;
}

/* line 135, node_modules/@brikcss/core/dist/sass/browser-reset/_browser-reset.init.css */
input,
select,
textarea {
	border: 0;
	margin: 0;
}

/* line 142, node_modules/@brikcss/core/dist/sass/browser-reset/_browser-reset.init.css */
button,
input[type='button'],
input[type='submit'] {
	padding: 0;
	border: 0;
	border-radius: 0;
	margin: 0;
	background: transparent;
	cursor: pointer;
}

/* stylelint-enable selector-no-qualifying-type */
/* line 154, node_modules/@brikcss/core/dist/sass/browser-reset/_browser-reset.init.css */
button::-moz-focus-inner {
	padding: 0;
	border: 0;
}

/** ------------------------------------------------------------------------------------------------
 *  @filename  _rhythm.init.scss
 *  @author  brikcss  <https://github.com/brikcss>
 *  @description  Rhythm init.
 ** --------------------------------------------------------------------------------------------- */
/* line 176, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.abstract.scss */
html {
	font-size: 8px;
}

/* line 187, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.abstract.scss */
body {
	line-height: 3rem;
}

/* line 12, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.init.scss */
.rhythm__grid {
	background-image: linear-gradient(0deg, rgba(0, 0, 0, 0.2) 0, transparent 1px, transparent 50%, rgba(0, 0, 0, 0.1) 50%, transparent calc(50% + 1px)), linear-gradient(90deg, rgba(0, 0, 0, 0.2) 0, transparent 1px, transparent 50%, rgba(0, 0, 0, 0.1) 50%, transparent calc(50% + 1px));
	background-size: 2rem 2rem;
}

/* line 2, node_modules/@brikcss/core/dist/sass/colors/_colors.init.scss */
:root {
	--color1: #62caea;
	--color2: #bdd62e;
	--color3: #faa019;
	--color4: #6b747b;
}

/* line 13, node_modules/@brikcss/core/dist/sass/colors/_colors.init.scss */
body {
	color: rgba(0, 0, 0, 0.87);
}

/* line 19, node_modules/@brikcss/core/dist/sass/colors/_colors.init.scss */
.bg__dark {
	background-color: rgba(0, 0, 0, 0.87);
	color: white;
}

/* line 19, node_modules/@brikcss/core/dist/sass/colors/_colors.init.scss */
.bg__dark1 {
	background-color: rgba(0, 0, 0, 0.87);
	color: white;
}

/* line 19, node_modules/@brikcss/core/dist/sass/colors/_colors.init.scss */
.bg__dark2 {
	background-color: rgba(0, 0, 0, 0.54);
	color: white;
}

/* line 19, node_modules/@brikcss/core/dist/sass/colors/_colors.init.scss */
.bg__dark3 {
	background-color: rgba(0, 0, 0, 0.38);
	color: rgba(0, 0, 0, 0.87);
}

/* line 19, node_modules/@brikcss/core/dist/sass/colors/_colors.init.scss */
.bg__dark4 {
	background-color: rgba(0, 0, 0, 0.12);
	color: rgba(0, 0, 0, 0.87);
}

/* line 19, node_modules/@brikcss/core/dist/sass/colors/_colors.init.scss */
.bg__light {
	background-color: white;
	color: rgba(0, 0, 0, 0.87);
}

/* line 19, node_modules/@brikcss/core/dist/sass/colors/_colors.init.scss */
.bg__light1 {
	background-color: white;
	color: rgba(0, 0, 0, 0.87);
}

/* line 19, node_modules/@brikcss/core/dist/sass/colors/_colors.init.scss */
.bg__light2 {
	background-color: rgba(255, 255, 255, 0.7);
	color: rgba(0, 0, 0, 0.87);
}

/* line 19, node_modules/@brikcss/core/dist/sass/colors/_colors.init.scss */
.bg__light3 {
	background-color: rgba(255, 255, 255, 0.5);
	color: white;
}

/* line 19, node_modules/@brikcss/core/dist/sass/colors/_colors.init.scss */
.bg__light4 {
	background-color: rgba(255, 255, 255, 0.12);
	color: white;
}

/* line 19, node_modules/@brikcss/core/dist/sass/colors/_colors.init.scss */
.bg__superbar {
	background-color: #3a4d5f;
	color: white;
}

/* line 19, node_modules/@brikcss/core/dist/sass/colors/_colors.init.scss */
.bg__superbar-icon {
	background-color: #9ca6b0;
	color: rgba(0, 0, 0, 0.87);
}

/* line 19, node_modules/@brikcss/core/dist/sass/colors/_colors.init.scss */
.bg__gray {
	background-color: #e6e6e6;
	color: rgba(0, 0, 0, 0.87);
}

/* line 19, node_modules/@brikcss/core/dist/sass/colors/_colors.init.scss */
.bg__color1 {
	background-color: var(--color1);
	color: white;
}

/* line 19, node_modules/@brikcss/core/dist/sass/colors/_colors.init.scss */
.bg__color2 {
	background-color: var(--color2);
	color: white;
}

/* line 19, node_modules/@brikcss/core/dist/sass/colors/_colors.init.scss */
.bg__color3 {
	background-color: var(--color3);
	color: white;
}

/* line 19, node_modules/@brikcss/core/dist/sass/colors/_colors.init.scss */
.bg__color4 {
	background-color: var(--color4);
	color: white;
}

/* line 27, node_modules/@brikcss/core/dist/sass/colors/_colors.init.scss */
.color__dark {
	color: rgba(0, 0, 0, 0.87);
}

/* line 27, node_modules/@brikcss/core/dist/sass/colors/_colors.init.scss */
.color__dark1 {
	color: rgba(0, 0, 0, 0.87);
}

/* line 27, node_modules/@brikcss/core/dist/sass/colors/_colors.init.scss */
.color__dark2, .heading__separator {
	color: rgba(0, 0, 0, 0.54);
}

/* line 27, node_modules/@brikcss/core/dist/sass/colors/_colors.init.scss */
.color__dark3 {
	color: rgba(0, 0, 0, 0.38);
}

/* line 27, node_modules/@brikcss/core/dist/sass/colors/_colors.init.scss */
.color__dark4 {
	color: rgba(0, 0, 0, 0.12);
}

/* line 27, node_modules/@brikcss/core/dist/sass/colors/_colors.init.scss */
.color__light {
	color: white;
}

/* line 27, node_modules/@brikcss/core/dist/sass/colors/_colors.init.scss */
.color__light1 {
	color: white;
}

/* line 27, node_modules/@brikcss/core/dist/sass/colors/_colors.init.scss */
.color__light2 {
	color: rgba(255, 255, 255, 0.7);
}

/* line 27, node_modules/@brikcss/core/dist/sass/colors/_colors.init.scss */
.color__light3 {
	color: rgba(255, 255, 255, 0.5);
}

/* line 27, node_modules/@brikcss/core/dist/sass/colors/_colors.init.scss */
.color__light4 {
	color: rgba(255, 255, 255, 0.12);
}

/* line 27, node_modules/@brikcss/core/dist/sass/colors/_colors.init.scss */
.color__superbar {
	color: #3a4d5f;
}

/* line 27, node_modules/@brikcss/core/dist/sass/colors/_colors.init.scss */
.color__superbar-icon {
	color: #9ca6b0;
}

/* line 27, node_modules/@brikcss/core/dist/sass/colors/_colors.init.scss */
.color__gray {
	color: #e6e6e6;
}

/* line 27, node_modules/@brikcss/core/dist/sass/colors/_colors.init.scss */
.color__color1 {
	color: var(--color1);
}

/* line 27, node_modules/@brikcss/core/dist/sass/colors/_colors.init.scss */
.color__color2 {
	color: var(--color2);
}

/* line 27, node_modules/@brikcss/core/dist/sass/colors/_colors.init.scss */
.color__color3 {
	color: var(--color3);
}

/* line 27, node_modules/@brikcss/core/dist/sass/colors/_colors.init.scss */
.color__color4 {
	color: var(--color4);
}

/** ------------------------------------------------------------------------------------------------
 *  @filename  _typography.init.scss
 *  @author  brikcss  <https://github.com/brikcss>
 *  @description  Typography init.
 ** --------------------------------------------------------------------------------------------- */
@font-face {
	font-family: "Roboto";
	font-style: normal;
	font-weight: 400;
	src: url("./fonts/Roboto-Regular.woff2") format("woff2"), url("./fonts/Roboto-Regular.woff") format("woff"), url("./fonts/Roboto-Regular.ttf") format("truetype");
}

@font-face {
	font-family: "Roboto";
	font-style: normal;
	font-weight: 500;
	src: url("./fonts/Roboto-Medium.woff2") format("woff2"), url("./fonts/Roboto-Medium.woff") format("woff"), url("./fonts/Roboto-Medium.ttf") format("truetype");
}

@font-face {
	font-family: "Roboto";
	font-style: normal;
	font-weight: 300;
	src: url("./fonts/Roboto-Light.woff2") format("woff2"), url("./fonts/Roboto-Light.woff") format("woff"), url("./fonts/Roboto-Light.ttf") format("truetype");
}

@font-face {
	font-family: "Roboto Mono";
	font-style: normal;
	font-weight: 400;
	src: url("./fonts/RobotoMono-Regular.woff2") format("woff2"), url("./fonts/RobotoMono-Regular.woff") format("woff"), url("./fonts/RobotoMono-Regular.ttf") format("truetype");
}

/* line 251, node_modules/@brikcss/core/dist/sass/typography/_typography.abstract.scss */
body {
	font-size: 14px;
	color: rgba(0, 0, 0, 0.87);
	font-family: "Roboto", sans-serif;
}

/* line 369, node_modules/@brikcss/core/dist/sass/typography/_typography.abstract.scss */
.font__reset-size {
	font-size: 14px;
}

/* line 373, node_modules/@brikcss/core/dist/sass/typography/_typography.abstract.scss */
.font__reset {
	font-size: 14px;
	color: rgba(0, 0, 0, 0.87);
	font-family: "Roboto", sans-serif;
}

/* line 379, node_modules/@brikcss/core/dist/sass/typography/_typography.abstract.scss */
.font__display4 {
	font-size: 8em;
	color: rgba(0, 0, 0, 0.54);
	font-weight: 300;
	line-height: 14rem;
	letter-spacing: -0.04em;
}

/* line 379, node_modules/@brikcss/core/dist/sass/typography/_typography.abstract.scss */
.font__display3 {
	font-size: 4em;
	line-height: 8rem;
	color: rgba(0, 0, 0, 0.54);
	letter-spacing: -0.02em;
}

/* line 379, node_modules/@brikcss/core/dist/sass/typography/_typography.abstract.scss */
.font__display2 {
	font-size: 3.21429em;
	line-height: 6rem;
	color: rgba(0, 0, 0, 0.54);
}

/* line 379, node_modules/@brikcss/core/dist/sass/typography/_typography.abstract.scss */
.font__display1 {
	font-size: 2.42857em;
	line-height: 5rem;
	color: rgba(0, 0, 0, 0.54);
}

/* line 379, node_modules/@brikcss/core/dist/sass/typography/_typography.abstract.scss */
.font__headline {
	font-size: 1.71429em;
	line-height: 4rem;
}

/* line 379, node_modules/@brikcss/core/dist/sass/typography/_typography.abstract.scss */
.font__title {
	font-size: 1.42857em;
	font-weight: 500;
	line-height: 3rem;
	letter-spacing: 0.02em;
}

/* line 379, node_modules/@brikcss/core/dist/sass/typography/_typography.abstract.scss */
.font__subheading {
	font-size: 1.14286em;
}

/* line 379, node_modules/@brikcss/core/dist/sass/typography/_typography.abstract.scss */
.font__body {
	font-size: 1em;
	color: rgba(0, 0, 0, 0.87);
	font-family: "Roboto", sans-serif;
}

/* line 379, node_modules/@brikcss/core/dist/sass/typography/_typography.abstract.scss */
.font__bold {
	font-size: 1em;
	font-weight: 500;
}

/* line 379, node_modules/@brikcss/core/dist/sass/typography/_typography.abstract.scss */
.font__button {
	font-size: 1em;
	font-weight: 500;
	text-transform: uppercase;
}

/* line 379, node_modules/@brikcss/core/dist/sass/typography/_typography.abstract.scss */
.font__caption {
	font-size: 0.85714em;
	color: rgba(0, 0, 0, 0.54);
}

/* line 418, node_modules/@brikcss/core/dist/sass/typography/_typography.abstract.scss */
p {
	max-width: 60ex;
}

/* line 418, node_modules/@brikcss/core/dist/sass/typography/_typography.abstract.scss */
li {
	max-width: 60ex;
}

/* line 418, node_modules/@brikcss/core/dist/sass/typography/_typography.abstract.scss */
dt {
	max-width: 60ex;
}

/* line 418, node_modules/@brikcss/core/dist/sass/typography/_typography.abstract.scss */
dd {
	max-width: 60ex;
}

/* line 418, node_modules/@brikcss/core/dist/sass/typography/_typography.abstract.scss */
.font__short-line {
	max-width: 40ex;
}

/** ------------------------------------------------------------------------------------------------
 *  @filename  burger-button.init.scss
 *  @author  brikcss  <https://github.com/brikcss>
 *  @description  Burger button init.
 ** --------------------------------------------------------------------------------------------- */
/* line 8, src/briks/burger-button/_burger-button.init.scss */
.burger {
	height: 3rem;
	width: 3rem;
	margin-right: 2rem;
	cursor: pointer;
	position: relative;
}

/* line 23, src/briks/burger-button/_burger-button.abstract.scss */
.burger:before {
	position: absolute;
	background-color: white;
	width: 3rem;
	height: 0.375rem;
	top: calc(50% - 0.1875rem - 0.9rem);
	content: '';
	display: block;
	-webkit-transition: all 300ms cubic-bezier(0.3, 0.2, 0.2, 1.3);
	transition: all 300ms cubic-bezier(0.3, 0.2, 0.2, 1.3);
}

/* line 34, src/briks/burger-button/_burger-button.abstract.scss */
.burger:after {
	position: absolute;
	background-color: white;
	width: 3rem;
	height: 0.375rem;
	bottom: calc(50% - 0.1875rem - 0.9rem);
	content: '';
	display: block;
	-webkit-transition: all 300ms cubic-bezier(0.3, 0.2, 0.2, 1.3);
	transition: all 300ms cubic-bezier(0.3, 0.2, 0.2, 1.3);
}

/* line 45, src/briks/burger-button/_burger-button.abstract.scss */
.burger.--is-active {
	-webkit-transform: rotate(360deg);
	transform: rotate(360deg);
}

/* line 48, src/briks/burger-button/_burger-button.abstract.scss */
.burger.--is-active:before {
	-webkit-transform: rotate(135deg);
	transform: rotate(135deg);
	top: calc(50% - 0.1875rem);
}

/* line 53, src/briks/burger-button/_burger-button.abstract.scss */
.burger.--is-active:after {
	-webkit-transform: rotate(-135deg);
	transform: rotate(-135deg);
	bottom: calc(50% - 0.1875rem);
}

/* line 59, src/briks/burger-button/_burger-button.abstract.scss */
.burger__toppings {
	position: absolute;
	background-color: white;
	width: 100%;
	height: 0.375rem;
	top: calc(50% - 0.1875rem);
	right: 0;
	opacity: 1;
	-webkit-transition: -webkit-transform 300ms cubic-bezier(0.3, 0.2, 0.2, 1.3);
	transition: -webkit-transform 300ms cubic-bezier(0.3, 0.2, 0.2, 1.3);
	transition: transform 300ms cubic-bezier(0.3, 0.2, 0.2, 1.3);
	transition: transform 300ms cubic-bezier(0.3, 0.2, 0.2, 1.3), -webkit-transform 300ms cubic-bezier(0.3, 0.2, 0.2, 1.3);
}

/* line 70, src/briks/burger-button/_burger-button.abstract.scss */
.--is-active .burger__toppings {
	-webkit-transform: scaleX(0);
	transform: scaleX(0);
}

@media (min-width: 1080px) {
	/* line 8, src/briks/burger-button/_burger-button.init.scss */
	.burger {
		display: none;
	}
}

/** ------------------------------------------------------------------------------------------------
 *  @filename  _code-editor.init.scss
 *  @author  brikcss  <https://github.com/brikcss>
 *  @dependencies  core/colors.abstract
 ** --------------------------------------------------------------------------------------------- */
/* line 7, src/briks/code-editor/_code-editor.init.scss */
.editor {
	display: block;
	margin-top: 2rem;
	margin-bottom: 2rem;
}

/* line 12, src/briks/code-editor/_code-editor.init.scss */
.editor .hljs {
	line-height: 2rem;
	padding: 2rem;
	-moz-tab-size: 4;
	-o-tab-size: 4;
	tab-size: 4;
}

/* line 18, src/briks/code-editor/_code-editor.init.scss */
.editor__code {
	display: -webkit-box;
	display: -ms-flexbox;
	display: flex;
	background-color: rgba(0, 0, 0, 0.87);
	color: white;
	background-color: #282c34;
}

/* line 24, src/briks/code-editor/_code-editor.init.scss */
.editor__code-tab {
	position: relative;
	width: 100%;
	min-width: 100%;
	margin-left: -100%;
	opacity: 0;
	-webkit-transition: opacity 0.5s, -webkit-transform 0.25s;
	transition: opacity 0.5s, -webkit-transform 0.25s;
	transition: opacity 0.5s, transform 0.25s;
	transition: opacity 0.5s, transform 0.25s, -webkit-transform 0.25s;
}

/* line 32, src/briks/code-editor/_code-editor.init.scss */
.editor__code-tab:first-of-type {
	margin-left: 0;
}

/* line 36, src/briks/code-editor/_code-editor.init.scss */
.editor__code-tab--active {
	opacity: 1;
	z-index: 1;
}

/* line 42, src/briks/code-editor/_code-editor.init.scss */
.editor__highlighted-code {
	position: absolute;
	left: 0;
	top: 0;
	width: 100%;
}

/* line 48, src/briks/code-editor/_code-editor.init.scss */
.editor--read-only .editor__highlighted-code {
	position: static;
}

/* line 53, src/briks/code-editor/_code-editor.init.scss */
.editor__raw-code {
	width: 100%;
	position: relative;
	z-index: 1;
	-webkit-text-fill-color: transparent;
}

/* line 59, src/briks/code-editor/_code-editor.init.scss */
.editor__raw-code:focus {
	-webkit-text-fill-color: inherit;
}

/* line 63, src/briks/code-editor/_code-editor.init.scss */
.editor__raw-code.hljs {
	background: transparent;
}

/* line 68, src/briks/code-editor/_code-editor.init.scss */
.editor__raw-code code {
	outline: none;
}

/* line 73, src/briks/code-editor/_code-editor.init.scss */
.editor__tab-button {
	color: rgba(0, 0, 0, 0.54);
}

/* line 76, src/briks/code-editor/_code-editor.init.scss */
.editor__tab-button--active {
	color: rgba(0, 0, 0, 0.87);
}

/* line 80, src/briks/code-editor/_code-editor.init.scss */
.editor__tab-button + .editor__tab-button {
	margin-left: 4rem;
}

/* line 85, src/briks/code-editor/_code-editor.init.scss */
.editor__preview {
	border-color: rgba(0, 0, 0, 0.12);
	border-width: 1px 1px 0;
	border-style: solid;
	padding: calc(2rem - 1px) 2rem 2rem;
	position: relative;
}

/* line 94, src/briks/code-editor/_code-editor.init.scss */
.editor__tabs {
	background-color: #e6e6e6;
	border-color: rgba(0, 0, 0, 0.12);
	border-width: 1px 1px 0;
	border-style: solid;
	padding-left: 2rem;
	padding-right: 2rem;
}

/** ------------------------------------------------------------------------------------------------
 *  @filename  _footer.init.scss
 *  @author  brikcss  <https://github.com/brikcss>
 *  @description  Footer init with default options.
 ** --------------------------------------------------------------------------------------------- */
/* line 8, src/briks/footer/_footer.init.scss */
.footer {
	background-color: #e6e6e6;
	display: -webkit-box;
	display: -ms-flexbox;
	display: flex;
	-webkit-box-align: center;
	-ms-flex-align: center;
	align-items: center;
	padding: 0 4rem;
	height: 8rem;
}

/** ------------------------------------------------------------------------------------------------
 *  @filename  _header.init.scss
 *  @author  brikcss  <https://github.com/brikcss>
 *  @description  Header init.
 ** --------------------------------------------------------------------------------------------- */
/* line 8, src/briks/header/_header.init.scss */
.header {
	display: -webkit-box;
	display: -ms-flexbox;
	display: flex;
	-webkit-box-align: center;
	-ms-flex-align: center;
	align-items: center;
	position: relative;
	height: 8rem;
	min-height: 8rem;
	padding: 0 4rem;
	background-color: var(--color1);
	color: white;
	-webkit-box-shadow: 0 2px 4px -1px rgba(0, 0, 0, 0.18), 0 4px 6px 0px rgba(0, 0, 0, 0.13), 0 2px 8px 0px rgba(0, 0, 0, 0.11);
	box-shadow: 0 2px 4px -1px rgba(0, 0, 0, 0.18), 0 4px 6px 0px rgba(0, 0, 0, 0.13), 0 2px 8px 0px rgba(0, 0, 0, 0.11);
	z-index: 40;
}

/* line 2, src/briks/show-hide/_show-hide.init.scss */
.show-hide {
	cursor: pointer;
	overflow: hidden;
	position: relative;
	-webkit-transition: height 300ms cubic-bezier(0.3, 0.2, 0.2, 1.15);
	transition: height 300ms cubic-bezier(0.3, 0.2, 0.2, 1.15);
}

/* line 25, src/briks/show-hide/_show-hide.abstract.scss */
.show-hide__icon {
	height: 2rem;
	width: 2rem;
	display: inline-block;
	position: absolute;
	right: 2rem;
	top: calc(50% - 1rem);
	-webkit-transition: -webkit-transform 225ms cubic-bezier(0.3, 0.2, 0.2, 1);
	transition: -webkit-transform 225ms cubic-bezier(0.3, 0.2, 0.2, 1);
	transition: transform 225ms cubic-bezier(0.3, 0.2, 0.2, 1);
	transition: transform 225ms cubic-bezier(0.3, 0.2, 0.2, 1), -webkit-transform 225ms cubic-bezier(0.3, 0.2, 0.2, 1);
}

/* line 35, src/briks/show-hide/_show-hide.abstract.scss */
.show-hide__icon:before, .show-hide__icon:after {
	background-color: #b3b3b3;
	content: ' ';
	display: inline-block;
	position: absolute;
}

/* line 43, src/briks/show-hide/_show-hide.abstract.scss */
.show-hide__icon:before {
	height: 0.25rem;
	width: 100%;
	top: calc(50% - 0.125rem);
}

/* line 49, src/briks/show-hide/_show-hide.abstract.scss */
.show-hide__icon:after {
	height: 94%;
	width: 0.25rem;
	top: 3%;
	right: calc(50% - 0.125rem);
	-webkit-transform: scale(1);
	transform: scale(1);
	-webkit-transition: -webkit-transform 300ms cubic-bezier(0.3, 0.2, 0.2, 1);
	transition: -webkit-transform 300ms cubic-bezier(0.3, 0.2, 0.2, 1);
	transition: transform 300ms cubic-bezier(0.3, 0.2, 0.2, 1);
	transition: transform 300ms cubic-bezier(0.3, 0.2, 0.2, 1), -webkit-transform 300ms cubic-bezier(0.3, 0.2, 0.2, 1);
}

/* line 61, src/briks/show-hide/_show-hide.abstract.scss */
.show-hide--is-active .show-hide__icon {
	-webkit-transform: rotate(180deg);
	transform: rotate(180deg);
}

/* line 64, src/briks/show-hide/_show-hide.abstract.scss */
.show-hide--is-active .show-hide__icon:after {
	-webkit-transform: scale(0);
	transform: scale(0);
}

/** ------------------------------------------------------------------------------------------------
 *  @filename  _sidebars.init.scss
 *  @author  brikcss  <https://github.com/brikcss>
 *  @description  Sidebars init with default options.
 ** --------------------------------------------------------------------------------------------- */
/* line 8, src/briks/sidebars/_sidebars.init.scss */
.sidebars {
	display: -webkit-box;
	display: -ms-flexbox;
	display: flex;
}

/* line 12, src/briks/sidebars/_sidebars.init.scss */
.sidebars__content {
	-webkit-box-flex: 1;
	-ms-flex-positive: 1;
	flex-grow: 1;
	width: 100%;
}

/* line 18, src/briks/sidebars/_sidebars.init.scss */
.sidebars__left {
	height: 100vh;
	width: 32rem;
	min-width: 32rem;
	overflow-y: auto;
	position: relative;
	-webkit-box-shadow: 0 3px 5px -1px rgba(0, 0, 0, 0.18), 0 6px 9px 0px rgba(0, 0, 0, 0.13), 0 3px 11px 1px rgba(0, 0, 0, 0.11);
	box-shadow: 0 3px 5px -1px rgba(0, 0, 0, 0.18), 0 6px 9px 0px rgba(0, 0, 0, 0.13), 0 3px 11px 1px rgba(0, 0, 0, 0.11);
	z-index: 60;
	margin-left: -32rem;
	will-change: margin-left;
	-webkit-transition: margin-left 300ms cubic-bezier(0.3, 0.2, 0.2, 1.3);
	transition: margin-left 300ms cubic-bezier(0.3, 0.2, 0.2, 1.3);
}

/* line 43, src/briks/sidebars/_sidebars.abstract.scss */
.sidebars__left:before {
	content: ' ';
	background-color: inherit;
	width: 4rem;
	height: 100%;
	position: absolute;
	left: -4rem;
	top: 0;
}

@media (min-width: 1080px) {
	/* line 18, src/briks/sidebars/_sidebars.init.scss */
	.sidebars__left {
		margin-left: 0;
		position: relative;
		left: auto;
		top: auto;
	}
}

/* line 72, src/briks/sidebars/_sidebars.abstract.scss */
.sidebars__left.--is-active {
	margin-left: 0;
}

/* line 24, src/briks/sidebars/_sidebars.init.scss */
.sidebars__right {
	height: 100vh;
	width: 32rem;
	min-width: 32rem;
	overflow-y: auto;
	position: relative;
	-webkit-box-shadow: 0 3px 5px -1px rgba(0, 0, 0, 0.18), 0 6px 9px 0px rgba(0, 0, 0, 0.13), 0 3px 11px 1px rgba(0, 0, 0, 0.11);
	box-shadow: 0 3px 5px -1px rgba(0, 0, 0, 0.18), 0 6px 9px 0px rgba(0, 0, 0, 0.13), 0 3px 11px 1px rgba(0, 0, 0, 0.11);
	z-index: 60;
	margin-right: -32rem;
	will-change: margin-right;
	-webkit-transition: margin-right 300ms cubic-bezier(0.3, 0.2, 0.2, 1.3);
	transition: margin-right 300ms cubic-bezier(0.3, 0.2, 0.2, 1.3);
}

/* line 43, src/briks/sidebars/_sidebars.abstract.scss */
.sidebars__right:before {
	content: ' ';
	background-color: inherit;
	width: 4rem;
	height: 100%;
	position: absolute;
	right: -4rem;
	top: 0;
}

/* line 72, src/briks/sidebars/_sidebars.abstract.scss */
.sidebars__right.--is-active {
	margin-right: 0;
}

/* line 3, src/briks/spinner/_spinner.init.scss */
.spinner {
	height: 6rem;
	width: 6rem;
	-webkit-box-sizing: border-box;
	box-sizing: border-box;
	border-radius: 50%;
	display: -webkit-box;
	display: -ms-flexbox;
	display: flex;
	-webkit-box-align: center;
	-ms-flex-align: center;
	align-items: center;
	-webkit-box-pack: center;
	-ms-flex-pack: center;
	justify-content: center;
	position: relative;
	will-change: transform, width, top;
	-webkit-transform: scale(0);
	transform: scale(0);
	-webkit-transform-origin: center;
	transform-origin: center;
	-webkit-transition: width 250ms cubic-bezier(0.6, 0.5, 0.2, 1.4) 125ms, top 250ms cubic-bezier(0.6, 0.5, 0.2, 1.4), -webkit-transform 250ms cubic-bezier(0.6, 0.5, 0.2, 1.4);
	transition: width 250ms cubic-bezier(0.6, 0.5, 0.2, 1.4) 125ms, top 250ms cubic-bezier(0.6, 0.5, 0.2, 1.4), -webkit-transform 250ms cubic-bezier(0.6, 0.5, 0.2, 1.4);
	transition: transform 250ms cubic-bezier(0.6, 0.5, 0.2, 1.4), width 250ms cubic-bezier(0.6, 0.5, 0.2, 1.4) 125ms, top 250ms cubic-bezier(0.6, 0.5, 0.2, 1.4);
	transition: transform 250ms cubic-bezier(0.6, 0.5, 0.2, 1.4), width 250ms cubic-bezier(0.6, 0.5, 0.2, 1.4) 125ms, top 250ms cubic-bezier(0.6, 0.5, 0.2, 1.4), -webkit-transform 250ms cubic-bezier(0.6, 0.5, 0.2, 1.4);
	background-color: white;
	-webkit-box-shadow: 0 0.21429rem 0.25rem rgba(0, 0, 0, 0.2), 0 0.375rem 0.5rem rgba(0, 0, 0, 0.15);
	box-shadow: 0 0.21429rem 0.25rem rgba(0, 0, 0, 0.2), 0 0.375rem 0.5rem rgba(0, 0, 0, 0.15);
	padding: 1.5rem;
	height: 6rem;
	width: 6rem;
}

/* line 349, node_modules/@brikcss/spinner/dist/sass/_spinner.abstract.scss */
.spinner__track {
	-webkit-box-sizing: border-box;
	box-sizing: border-box;
	border-radius: 50%;
	-webkit-box-shadow: inset 0 0 0 0.4rem;
	box-shadow: inset 0 0 0 0.4rem;
	color: transparent;
	background-color: transparent;
	position: absolute;
	height: 6rem;
	width: 6rem;
	-webkit-animation: rotate-spinner 1.3s linear infinite;
	animation: rotate-spinner 1.3s linear infinite;
	-webkit-transform-origin: center;
	transform-origin: center;
}

/* line 367, node_modules/@brikcss/spinner/dist/sass/_spinner.abstract.scss */
.spinner__right, .spinner__left {
	position: absolute;
	top: 0;
	height: 100%;
	width: 50%;
	overflow: hidden;
}

/* line 375, node_modules/@brikcss/spinner/dist/sass/_spinner.abstract.scss */
.spinner__right:after, .spinner__left:after {
	content: '';
	clip: rect(0 3rem 6rem 0);
	border: 0.4rem solid #2094f3;
	border-radius: 50%;
	-webkit-box-sizing: border-box;
	box-sizing: border-box;
	height: 100%;
	width: 200%;
	position: absolute;
	left: 0;
	top: 0;
	-webkit-transition: -webkit-transform 0.15s ease-in-out;
	transition: -webkit-transform 0.15s ease-in-out;
	transition: transform 0.15s ease-in-out;
	transition: transform 0.15s ease-in-out, -webkit-transform 0.15s ease-in-out;
}

/* line 390, node_modules/@brikcss/spinner/dist/sass/_spinner.abstract.scss */
.spinner__right {
	right: 0;
	-webkit-transform-origin: center left;
	transform-origin: center left;
	-webkit-animation: rotate-spinner-offset 5.2s cubic-bezier(0.4, 0, 0.2, 1) infinite;
	animation: rotate-spinner-offset 5.2s cubic-bezier(0.4, 0, 0.2, 1) infinite;
}

/* line 395, node_modules/@brikcss/spinner/dist/sass/_spinner.abstract.scss */
.spinner__right:after {
	-webkit-animation: rotate-right-bar 1.3s cubic-bezier(0.4, 0, 0.2, 1) infinite;
	animation: rotate-right-bar 1.3s cubic-bezier(0.4, 0, 0.2, 1) infinite;
	left: -100%;
}

/* line 401, node_modules/@brikcss/spinner/dist/sass/_spinner.abstract.scss */
.spinner__left {
	left: 0;
	-webkit-transform-origin: center right;
	transform-origin: center right;
	-webkit-animation: rotate-spinner-offset 5.2s cubic-bezier(0.4, 0, 0.2, 1) infinite;
	animation: rotate-spinner-offset 5.2s cubic-bezier(0.4, 0, 0.2, 1) infinite;
}

/* line 406, node_modules/@brikcss/spinner/dist/sass/_spinner.abstract.scss */
.spinner__left:after {
	-webkit-animation: rotate-left-bar 1.3s cubic-bezier(0.4, 0, 0.2, 1) infinite;
	animation: rotate-left-bar 1.3s cubic-bezier(0.4, 0, 0.2, 1) infinite;
	-webkit-transform: rotate(180deg);
	transform: rotate(180deg);
}

/* line 412, node_modules/@brikcss/spinner/dist/sass/_spinner.abstract.scss */
.spinner__progress {
	position: relative;
	z-index: 1;
}

/* line 418, node_modules/@brikcss/spinner/dist/sass/_spinner.abstract.scss */
.spinner--is-spinning {
	-webkit-transform: scale(1);
	transform: scale(1);
}

@-webkit-keyframes rotate-left-bar {
	0%,
	100% {
		-webkit-transform: rotate(-189deg);
		transform: rotate(-189deg);
	}
	50% {
		-webkit-transform: rotate(-324deg);
		transform: rotate(-324deg);
	}
}

@keyframes rotate-left-bar {
	0%,
	100% {
		-webkit-transform: rotate(-189deg);
		transform: rotate(-189deg);
	}
	50% {
		-webkit-transform: rotate(-324deg);
		transform: rotate(-324deg);
	}
}

@-webkit-keyframes rotate-right-bar {
	0%,
	100% {
		-webkit-transform: rotate(9deg);
		transform: rotate(9deg);
	}
	50% {
		-webkit-transform: rotate(144deg);
		transform: rotate(144deg);
	}
}

@keyframes rotate-right-bar {
	0%,
	100% {
		-webkit-transform: rotate(9deg);
		transform: rotate(9deg);
	}
	50% {
		-webkit-transform: rotate(144deg);
		transform: rotate(144deg);
	}
}

@-webkit-keyframes rotate-spinner {
	0% {
		-webkit-transform: rotate(0deg);
		transform: rotate(0deg);
	}
	50% {
		-webkit-transform: rotate(180deg);
		transform: rotate(180deg);
	}
	100% {
		-webkit-transform: rotate(360deg);
		transform: rotate(360deg);
	}
}

@keyframes rotate-spinner {
	0% {
		-webkit-transform: rotate(0deg);
		transform: rotate(0deg);
	}
	50% {
		-webkit-transform: rotate(180deg);
		transform: rotate(180deg);
	}
	100% {
		-webkit-transform: rotate(360deg);
		transform: rotate(360deg);
	}
}

@-webkit-keyframes rotate-spinner-offset {
	12.5% {
		-webkit-transform: rotate(135deg);
		transform: rotate(135deg);
	}
	25% {
		-webkit-transform: rotate(270deg);
		transform: rotate(270deg);
	}
	37.5% {
		-webkit-transform: rotate(405deg);
		transform: rotate(405deg);
	}
	50% {
		-webkit-transform: rotate(540deg);
		transform: rotate(540deg);
	}
	62.5% {
		-webkit-transform: rotate(675deg);
		transform: rotate(675deg);
	}
	75% {
		-webkit-transform: rotate(810deg);
		transform: rotate(810deg);
	}
	87.5% {
		-webkit-transform: rotate(945deg);
		transform: rotate(945deg);
	}
	100% {
		-webkit-transform: rotate(1080deg);
		transform: rotate(1080deg);
	}
}

@keyframes rotate-spinner-offset {
	12.5% {
		-webkit-transform: rotate(135deg);
		transform: rotate(135deg);
	}
	25% {
		-webkit-transform: rotate(270deg);
		transform: rotate(270deg);
	}
	37.5% {
		-webkit-transform: rotate(405deg);
		transform: rotate(405deg);
	}
	50% {
		-webkit-transform: rotate(540deg);
		transform: rotate(540deg);
	}
	62.5% {
		-webkit-transform: rotate(675deg);
		transform: rotate(675deg);
	}
	75% {
		-webkit-transform: rotate(810deg);
		transform: rotate(810deg);
	}
	87.5% {
		-webkit-transform: rotate(945deg);
		transform: rotate(945deg);
	}
	100% {
		-webkit-transform: rotate(1080deg);
		transform: rotate(1080deg);
	}
}

/* line 88, node_modules/@brikcss/spinner/dist/sass/_spinner.abstract.scss */
.spinner .spinner__track {
	height: 3.75rem;
	width: 3.75rem;
}

/* line 94, node_modules/@brikcss/spinner/dist/sass/_spinner.abstract.scss */
.spinner .spinner__right:after {
	border-width: 0.375rem;
	clip: rect(0 1.875rem 3.75rem 0);
}

/* line 101, node_modules/@brikcss/spinner/dist/sass/_spinner.abstract.scss */
.spinner .spinner__left:after {
	border-width: 0.375rem;
	clip: rect(0 1.875rem 3.75rem 0);
}

/* line 239, node_modules/@brikcss/spinner/dist/sass/_spinner.abstract.scss */
.spinner.spinner--is-spinning .spinner__left:after {
	-webkit-animation: rotate-left-bar 1.3s cubic-bezier(0.4, 0, 0.2, 1) infinite, rotate-spinner-colors 7.8s ease-in-out infinite;
	animation: rotate-left-bar 1.3s cubic-bezier(0.4, 0, 0.2, 1) infinite, rotate-spinner-colors 7.8s ease-in-out infinite;
}

/* line 250, node_modules/@brikcss/spinner/dist/sass/_spinner.abstract.scss */
.spinner.spinner--is-spinning .spinner__right:after {
	-webkit-animation: rotate-right-bar 1.3s cubic-bezier(0.4, 0, 0.2, 1) infinite, rotate-spinner-colors 7.8s ease-in-out infinite;
	animation: rotate-right-bar 1.3s cubic-bezier(0.4, 0, 0.2, 1) infinite, rotate-spinner-colors 7.8s ease-in-out infinite;
}

@-webkit-keyframes rotate-spinner-colors {
	0% {
		border-color: #f44034;
	}
	25% {
		border-color: #2094f3;
	}
	50% {
		border-color: #4cae4f;
	}
	75% {
		border-color: #ff9900;
	}
	100% {
		border-color: #f44034;
	}
}

@keyframes rotate-spinner-colors {
	0% {
		border-color: #f44034;
	}
	25% {
		border-color: #2094f3;
	}
	50% {
		border-color: #4cae4f;
	}
	75% {
		border-color: #ff9900;
	}
	100% {
		border-color: #f44034;
	}
}

/* line 505, node_modules/@brikcss/spinner/dist/sass/_spinner.abstract.scss */
.spinner--inline {
	height: 1em;
	width: 1em;
	background-color: transparent;
	-webkit-box-shadow: none;
	box-shadow: none;
	padding: 0;
	display: inline-block;
	vertical-align: top;
	width: 0;
	overflow: hidden;
}

/* line 88, node_modules/@brikcss/spinner/dist/sass/_spinner.abstract.scss */
.spinner--inline .spinner__track {
	height: 1em;
	width: 1em;
}

/* line 94, node_modules/@brikcss/spinner/dist/sass/_spinner.abstract.scss */
.spinner--inline .spinner__right:after {
	border-width: 0.15em;
	clip: rect(0 0.5em 1em 0);
}

/* line 101, node_modules/@brikcss/spinner/dist/sass/_spinner.abstract.scss */
.spinner--inline .spinner__left:after {
	border-width: 0.15em;
	clip: rect(0 0.5em 1em 0);
}

/* line 225, node_modules/@brikcss/spinner/dist/sass/_spinner.abstract.scss */
.spinner--inline .spinner__track {
	left: 0;
	top: 0;
}

/* line 230, node_modules/@brikcss/spinner/dist/sass/_spinner.abstract.scss */
.spinner--inline.spinner--is-spinning {
	width: 1em;
	-webkit-transition-delay: 0s;
	transition-delay: 0s;
}

/* line 505, node_modules/@brikcss/spinner/dist/sass/_spinner.abstract.scss */
.spinner--clean {
	background-color: transparent;
	-webkit-box-shadow: none;
	box-shadow: none;
	padding: 0;
	height: 6rem;
	width: 6rem;
}

/* line 88, node_modules/@brikcss/spinner/dist/sass/_spinner.abstract.scss */
.spinner--clean .spinner__track {
	height: 6rem;
	width: 6rem;
}

/* line 94, node_modules/@brikcss/spinner/dist/sass/_spinner.abstract.scss */
.spinner--clean .spinner__right:after {
	border-width: 0.4rem;
	clip: rect(0 3rem 6rem 0);
}

/* line 101, node_modules/@brikcss/spinner/dist/sass/_spinner.abstract.scss */
.spinner--clean .spinner__left:after {
	border-width: 0.4rem;
	clip: rect(0 3rem 6rem 0);
}

/* line 505, node_modules/@brikcss/spinner/dist/sass/_spinner.abstract.scss */
.spinner--absolute {
	position: absolute;
	top: 2rem;
}

/* line 505, node_modules/@brikcss/spinner/dist/sass/_spinner.abstract.scss */
.spinner--slide {
	position: absolute;
	top: -5rem;
}

/* line 291, node_modules/@brikcss/spinner/dist/sass/_spinner.abstract.scss */
.spinner--slide.spinner--is-spinning {
	top: 2rem;
}

/** ------------------------------------------------------------------------------------------------
 *  @filename  _tabs.init.scss
 *  @author  brikcss  <https://github.com/brikcss>
 *  @dependencies  core/colors.abstract
 ** --------------------------------------------------------------------------------------------- */
/* line 8, src/briks/tabs/_tabs.init.scss */
tabs {
	display: block;
}

/* line 13, src/briks/tabs/_tabs.init.scss */
.tabs__content {
	position: relative;
	width: 100%;
	min-width: 100%;
	display: none;
}

/* line 19, src/briks/tabs/_tabs.init.scss */
.tabs__content:first-child {
	margin-left: 0;
}

/* line 23, src/briks/tabs/_tabs.init.scss */
.tabs__content--active {
	display: block;
}

/* line 28, src/briks/tabs/_tabs.init.scss */
.tabs__buttons {
	display: -webkit-box;
	display: -ms-flexbox;
	display: flex;
}

/* line 32, src/briks/tabs/_tabs.init.scss */
.tabs__button {
	font-size: 1em;
	font-weight: 500;
	text-transform: uppercase;
	color: rgba(0, 0, 0, 0.54);
}

/* line 36, src/briks/tabs/_tabs.init.scss */
.tabs__button--active {
	color: rgba(0, 0, 0, 0.87);
}

/* line 40, src/briks/tabs/_tabs.init.scss */
.tabs__button + .tabs__button {
	margin-left: 4rem;
}

/* line 7, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.p-0 {
	padding: 0 !important;
}

/* line 10, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.px-0 {
	padding-left: 0 !important;
	padding-right: 0 !important;
}

/* line 14, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.py-0 {
	padding-bottom: 0 !important;
	padding-top: 0 !important;
}

/* line 18, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.pl-0 {
	padding-left: 0 !important;
}

/* line 21, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.pr-0 {
	padding-right: 0 !important;
}

/* line 24, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.pb-0 {
	padding-bottom: 0 !important;
}

/* line 27, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.pt-0 {
	padding-top: 0 !important;
}

/* line 7, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.m-0 {
	margin: 0 !important;
}

/* line 10, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.mx-0 {
	margin-left: 0 !important;
	margin-right: 0 !important;
}

/* line 14, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.my-0 {
	margin-bottom: 0 !important;
	margin-top: 0 !important;
}

/* line 18, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.ml-0 {
	margin-left: 0 !important;
}

/* line 21, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.mr-0 {
	margin-right: 0 !important;
}

/* line 24, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.mb-0 {
	margin-bottom: 0 !important;
}

/* line 27, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.mt-0 {
	margin-top: 0 !important;
}

/* line 7, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.p-0-5 {
	padding: 0.5rem !important;
}

/* line 10, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.px-0-5 {
	padding-left: 0.5rem !important;
	padding-right: 0.5rem !important;
}

/* line 14, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.py-0-5 {
	padding-bottom: 0.5rem !important;
	padding-top: 0.5rem !important;
}

/* line 18, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.pl-0-5 {
	padding-left: 0.5rem !important;
}

/* line 21, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.pr-0-5 {
	padding-right: 0.5rem !important;
}

/* line 24, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.pb-0-5 {
	padding-bottom: 0.5rem !important;
}

/* line 27, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.pt-0-5 {
	padding-top: 0.5rem !important;
}

/* line 7, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.m-0-5 {
	margin: 0.5rem !important;
}

/* line 10, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.mx-0-5 {
	margin-left: 0.5rem !important;
	margin-right: 0.5rem !important;
}

/* line 14, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.my-0-5 {
	margin-bottom: 0.5rem !important;
	margin-top: 0.5rem !important;
}

/* line 18, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.ml-0-5 {
	margin-left: 0.5rem !important;
}

/* line 21, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.mr-0-5 {
	margin-right: 0.5rem !important;
}

/* line 24, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.mb-0-5 {
	margin-bottom: 0.5rem !important;
}

/* line 27, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.mt-0-5 {
	margin-top: 0.5rem !important;
}

/* line 7, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.p-1 {
	padding: 1rem !important;
}

/* line 10, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.px-1 {
	padding-left: 1rem !important;
	padding-right: 1rem !important;
}

/* line 14, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.py-1 {
	padding-bottom: 1rem !important;
	padding-top: 1rem !important;
}

/* line 18, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.pl-1 {
	padding-left: 1rem !important;
}

/* line 21, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.pr-1 {
	padding-right: 1rem !important;
}

/* line 24, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.pb-1 {
	padding-bottom: 1rem !important;
}

/* line 27, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.pt-1 {
	padding-top: 1rem !important;
}

/* line 7, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.m-1 {
	margin: 1rem !important;
}

/* line 10, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.mx-1 {
	margin-left: 1rem !important;
	margin-right: 1rem !important;
}

/* line 14, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.my-1 {
	margin-bottom: 1rem !important;
	margin-top: 1rem !important;
}

/* line 18, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.ml-1 {
	margin-left: 1rem !important;
}

/* line 21, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.mr-1 {
	margin-right: 1rem !important;
}

/* line 24, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.mb-1 {
	margin-bottom: 1rem !important;
}

/* line 27, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.mt-1 {
	margin-top: 1rem !important;
}

/* line 7, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.p-1-5 {
	padding: 1.5rem !important;
}

/* line 10, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.px-1-5 {
	padding-left: 1.5rem !important;
	padding-right: 1.5rem !important;
}

/* line 14, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.py-1-5 {
	padding-bottom: 1.5rem !important;
	padding-top: 1.5rem !important;
}

/* line 18, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.pl-1-5 {
	padding-left: 1.5rem !important;
}

/* line 21, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.pr-1-5 {
	padding-right: 1.5rem !important;
}

/* line 24, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.pb-1-5 {
	padding-bottom: 1.5rem !important;
}

/* line 27, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.pt-1-5 {
	padding-top: 1.5rem !important;
}

/* line 7, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.m-1-5 {
	margin: 1.5rem !important;
}

/* line 10, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.mx-1-5 {
	margin-left: 1.5rem !important;
	margin-right: 1.5rem !important;
}

/* line 14, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.my-1-5 {
	margin-bottom: 1.5rem !important;
	margin-top: 1.5rem !important;
}

/* line 18, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.ml-1-5 {
	margin-left: 1.5rem !important;
}

/* line 21, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.mr-1-5 {
	margin-right: 1.5rem !important;
}

/* line 24, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.mb-1-5 {
	margin-bottom: 1.5rem !important;
}

/* line 27, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.mt-1-5 {
	margin-top: 1.5rem !important;
}

/* line 7, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.p-2 {
	padding: 2rem !important;
}

/* line 10, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.px-2 {
	padding-left: 2rem !important;
	padding-right: 2rem !important;
}

/* line 14, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.py-2 {
	padding-bottom: 2rem !important;
	padding-top: 2rem !important;
}

/* line 18, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.pl-2 {
	padding-left: 2rem !important;
}

/* line 21, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.pr-2 {
	padding-right: 2rem !important;
}

/* line 24, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.pb-2 {
	padding-bottom: 2rem !important;
}

/* line 27, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.pt-2 {
	padding-top: 2rem !important;
}

/* line 7, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.m-2 {
	margin: 2rem !important;
}

/* line 10, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.mx-2 {
	margin-left: 2rem !important;
	margin-right: 2rem !important;
}

/* line 14, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.my-2 {
	margin-bottom: 2rem !important;
	margin-top: 2rem !important;
}

/* line 18, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.ml-2 {
	margin-left: 2rem !important;
}

/* line 21, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.mr-2 {
	margin-right: 2rem !important;
}

/* line 24, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.mb-2 {
	margin-bottom: 2rem !important;
}

/* line 27, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.mt-2 {
	margin-top: 2rem !important;
}

/* line 7, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.p-3 {
	padding: 3rem !important;
}

/* line 10, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.px-3 {
	padding-left: 3rem !important;
	padding-right: 3rem !important;
}

/* line 14, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.py-3 {
	padding-bottom: 3rem !important;
	padding-top: 3rem !important;
}

/* line 18, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.pl-3 {
	padding-left: 3rem !important;
}

/* line 21, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.pr-3 {
	padding-right: 3rem !important;
}

/* line 24, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.pb-3 {
	padding-bottom: 3rem !important;
}

/* line 27, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.pt-3 {
	padding-top: 3rem !important;
}

/* line 7, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.m-3 {
	margin: 3rem !important;
}

/* line 10, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.mx-3 {
	margin-left: 3rem !important;
	margin-right: 3rem !important;
}

/* line 14, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.my-3 {
	margin-bottom: 3rem !important;
	margin-top: 3rem !important;
}

/* line 18, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.ml-3 {
	margin-left: 3rem !important;
}

/* line 21, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.mr-3 {
	margin-right: 3rem !important;
}

/* line 24, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.mb-3 {
	margin-bottom: 3rem !important;
}

/* line 27, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.mt-3 {
	margin-top: 3rem !important;
}

/* line 7, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.p-4 {
	padding: 4rem !important;
}

/* line 10, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.px-4 {
	padding-left: 4rem !important;
	padding-right: 4rem !important;
}

/* line 14, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.py-4 {
	padding-bottom: 4rem !important;
	padding-top: 4rem !important;
}

/* line 18, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.pl-4 {
	padding-left: 4rem !important;
}

/* line 21, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.pr-4 {
	padding-right: 4rem !important;
}

/* line 24, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.pb-4 {
	padding-bottom: 4rem !important;
}

/* line 27, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.pt-4 {
	padding-top: 4rem !important;
}

/* line 7, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.m-4 {
	margin: 4rem !important;
}

/* line 10, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.mx-4 {
	margin-left: 4rem !important;
	margin-right: 4rem !important;
}

/* line 14, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.my-4 {
	margin-bottom: 4rem !important;
	margin-top: 4rem !important;
}

/* line 18, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.ml-4 {
	margin-left: 4rem !important;
}

/* line 21, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.mr-4 {
	margin-right: 4rem !important;
}

/* line 24, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.mb-4 {
	margin-bottom: 4rem !important;
}

/* line 27, node_modules/@brikcss/core/dist/sass/rhythm/_rhythm.utilities.scss */
.mt-4 {
	margin-top: 4rem !important;
}

/*

Atom One Dark by Daniel Gamage
Original One Dark Syntax theme from https://github.com/atom/one-dark-syntax

base:    #282c34
mono-1:  #abb2bf
mono-2:  #818896
mono-3:  #5c6370
hue-1:   #56b6c2
hue-2:   #61aeee
hue-3:   #c678dd
hue-4:   #98c379
hue-5:   #e06c75
hue-5-2: #be5046
hue-6:   #d19a66
hue-6-2: #e6c07b

*/
/* line 21, node_modules/highlight.js/styles/atom-one-dark.css */
.hljs {
	display: block;
	overflow-x: auto;
	padding: 0.5em;
	color: #abb2bf;
	background: #282c34;
}

/* line 29, node_modules/highlight.js/styles/atom-one-dark.css */
.hljs-comment,
.hljs-quote {
	color: #5c6370;
	font-style: italic;
}

/* line 35, node_modules/highlight.js/styles/atom-one-dark.css */
.hljs-doctag,
.hljs-keyword,
.hljs-formula {
	color: #c678dd;
}

/* line 41, node_modules/highlight.js/styles/atom-one-dark.css */
.hljs-section,
.hljs-name,
.hljs-selector-tag,
.hljs-deletion,
.hljs-subst {
	color: #e06c75;
}

/* line 49, node_modules/highlight.js/styles/atom-one-dark.css */
.hljs-literal {
	color: #56b6c2;
}

/* line 53, node_modules/highlight.js/styles/atom-one-dark.css */
.hljs-string,
.hljs-regexp,
.hljs-addition,
.hljs-attribute,
.hljs-meta-string {
	color: #98c379;
}

/* line 61, node_modules/highlight.js/styles/atom-one-dark.css */
.hljs-built_in,
.hljs-class .hljs-title {
	color: #e6c07b;
}

/* line 66, node_modules/highlight.js/styles/atom-one-dark.css */
.hljs-attr,
.hljs-variable,
.hljs-template-variable,
.hljs-type,
.hljs-selector-class,
.hljs-selector-attr,
.hljs-selector-pseudo,
.hljs-number {
	color: #d19a66;
}

/* line 77, node_modules/highlight.js/styles/atom-one-dark.css */
.hljs-symbol,
.hljs-bullet,
.hljs-link,
.hljs-meta,
.hljs-selector-id,
.hljs-title {
	color: #61aeee;
}

/* line 86, node_modules/highlight.js/styles/atom-one-dark.css */
.hljs-emphasis {
	font-style: italic;
}

/* line 90, node_modules/highlight.js/styles/atom-one-dark.css */
.hljs-strong {
	font-weight: bold;
}

/* line 94, node_modules/highlight.js/styles/atom-one-dark.css */
.hljs-link {
	text-decoration: underline;
}

/* line 4, src/angularjs/app.scss */
html {
	overflow: hidden;
}

/* line 8, src/angularjs/app.scss */
body {
	height: 100%;
	overflow: hidden;
}

/* line 13, src/angularjs/app.scss */
sub,
sup {
	/* Specified in % so that the sup/sup is the right size relative to the surrounding text */
	font-size: 0.75em;
	/* Zero out the line-height so that it doesn't interfere with the positioning that follows */
	line-height: 0;
	/* Where the magic happens: makes all browsers position the sup/sup properly, relative to the surrounding text */
	position: relative;
	/* Note that if you're using Eric Meyer's reset.css, this is already set and you can remove this rule */
	vertical-align: baseline;
}

/* line 28, src/angularjs/app.scss */
sup {
	/* Move the superscripted text up */
	top: -0.5em;
}

/* line 33, src/angularjs/app.scss */
sub {
	/* Move the subscripted text down, but only half as far down as the superscript moved up */
	bottom: -0.25em;
}

/* line 38, src/angularjs/app.scss */
dt {
	font-style: italic;
}

/* line 42, src/angularjs/app.scss */
blockquote {
	padding-left: 2rem;
	border-left: 0.5rem solid #e6e6e6;
}

/* line 70, src/angularjs/app.scss */
h2 {
	margin-top: 6rem;
}

/* line 70, src/angularjs/app.scss */
h3 {
	margin-top: 6rem;
}

/* line 70, src/angularjs/app.scss */
h4 {
	margin-top: 4rem;
}

/* line 70, src/angularjs/app.scss */
h5 {
	margin-top: 2rem;
}

/* line 70, src/angularjs/app.scss */
h6 {
	margin-top: 2rem;
}

/* line 70, src/angularjs/app.scss */
p {
	margin-top: 2rem;
}

/* line 70, src/angularjs/app.scss */
blockquote {
	margin-top: 2rem;
}

/* line 70, src/angularjs/app.scss */
h1:first-child {
	margin-top: 0;
}

/* line 70, src/angularjs/app.scss */
h2:first-child {
	margin-top: 0;
}

/* line 70, src/angularjs/app.scss */
h3:first-child {
	margin-top: 0;
}

/* line 70, src/angularjs/app.scss */
h4:first-child {
	margin-top: 0;
}

/* line 70, src/angularjs/app.scss */
h5:first-child {
	margin-top: 0;
}

/* line 70, src/angularjs/app.scss */
h6:first-child {
	margin-top: 0;
}

/* line 70, src/angularjs/app.scss */
p:first-child {
	margin-top: 0;
}

/* line 70, src/angularjs/app.scss */
ul:first-child {
	margin-top: 0;
}

/* line 70, src/angularjs/app.scss */
ol:first-child {
	margin-top: 0;
}

/* line 76, src/angularjs/app.scss */
.sp__0 {
	margin: 0;
}

/* line 84, src/angularjs/app.scss */
code {
	background-color: rgba(51, 51, 51, 0.12);
	font-family: 'Roboto Mono', monospace;
	line-height: 1;
}

/* line 90, src/angularjs/app.scss */
pre code {
	background-color: transparent;
}

/* line 96, src/angularjs/app.scss */
li {
	margin-top: 2rem;
}

/* line 100, src/angularjs/app.scss */
.bullets,
.numbers {
	padding-left: 4rem;
}

/* line 105, src/angularjs/app.scss */
.bullets {
	list-style-type: disc;
}

/* line 109, src/angularjs/app.scss */
.numbers {
	list-style-type: decimal;
}

/* line 117, src/angularjs/app.scss */
.header__title {
	padding-right: 2rem;
	-webkit-box-flex: 1;
	-ms-flex-positive: 1;
	flex-grow: 1;
}

/* line 121, src/angularjs/app.scss */
.header__title:first-child {
	padding-left: 0;
}

/* line 126, src/angularjs/app.scss */
.header__version {
	color: rgba(255, 255, 255, 0.7);
	font-size: 0.6em;
	line-height: 1;
	margin-left: 1rem;
}

/* line 133, src/angularjs/app.scss */
.header__button {
	color: inherit;
}

/* line 137, src/angularjs/app.scss */
.header .burger {
	padding-right: 2rem;
}

/* line 145, src/angularjs/app.scss */
.page {
	display: -webkit-box;
	display: -ms-flexbox;
	display: flex;
	-webkit-box-orient: vertical;
	-webkit-box-direction: normal;
	-ms-flex-direction: column;
	flex-direction: column;
	min-height: 100vh;
	min-width: 100vw;
}

@media (min-width: 1080px) {
	/* line 145, src/angularjs/app.scss */
	.page {
		min-width: 0;
	}
}

/* line 155, src/angularjs/app.scss */
.page__scroller {
	height: calc(100vh - 8rem);
	-webkit-box-flex: 1;
	-ms-flex-positive: 1;
	flex-grow: 1;
	overflow-y: auto;
}

/* line 161, src/angularjs/app.scss */
.page__content {
	-webkit-box-flex: 1;
	-ms-flex-positive: 1;
	flex-grow: 1;
	min-height: calc(100vh - 16rem);
	padding: 4rem;
}

/* line 168, src/angularjs/app.scss */
.page-tabs {
	margin-left: -4rem;
	margin-right: -4rem;
	margin-top: -4rem;
}

/* line 173, src/angularjs/app.scss */
.page-tabs .tabs__content {
	padding: 4rem 4rem 0;
}

/* line 177, src/angularjs/app.scss */
.page-tabs .tabs__buttons {
	background-color: white;
	border-bottom: 1px solid rgba(0, 0, 0, 0.12);
	height: 6rem;
	position: relative;
	z-index: 40;
}

/* line 185, src/angularjs/app.scss */
.page-tabs .tabs__button {
	height: 100%;
	padding-left: 4rem;
	padding-right: 4rem;
	position: relative;
	margin-left: 0;
	-webkit-transition: color 200ms;
	transition: color 200ms;
}

/* line 193, src/angularjs/app.scss */
.page-tabs .tabs__button:before {
	content: ' ';
	border-color: var(--color1) transparent transparent transparent;
	border-width: 0;
	border-style: solid;
	height: 0;
	width: 0;
	position: absolute;
	left: 50%;
	top: 0;
	z-index: -1;
	-webkit-transition-property: border-width, left;
	transition-property: border-width, left;
	-webkit-transition-duration: 250ms;
	transition-duration: 250ms;
	-webkit-transition-timing-function: cubic-bezier(0.3, 0.2, 0.2, 1.3);
	transition-timing-function: cubic-bezier(0.3, 0.2, 0.2, 1.3);
}

/* line 209, src/angularjs/app.scss */
.page-tabs .tabs__button:after {
	content: ' ';
	background-color: transparent;
	opacity: 0.7;
	position: absolute;
	left: 0;
	right: 0;
	bottom: 0;
	top: 0;
	-webkit-transition: background-color 200ms;
	transition: background-color 200ms;
	z-index: -1;
}

/* line 222, src/angularjs/app.scss */
.page-tabs .tabs__button--active {
	color: white;
}

/* line 225, src/angularjs/app.scss */
.page-tabs .tabs__button--active:before {
	border-width: 1.25rem 1rem 0;
	left: calc(50% - 1rem);
}

/* line 230, src/angularjs/app.scss */
.page-tabs .tabs__button--active:after {
	background-color: var(--color1);
}

/* line 236, src/angularjs/app.scss */
.page-tabs .tabs__button-label {
	position: relative;
	z-index: 1;
}

/* line 245, src/angularjs/app.scss */
.superbar {
	background-color: #e6e6e6;
	overflow: hidden;
}

/* line 249, src/angularjs/app.scss */
.superbar__header {
	background-color: #3a4d5f;
	height: 8rem;
	display: -webkit-box;
	display: -ms-flexbox;
	display: flex;
	-webkit-box-align: center;
	-ms-flex-align: center;
	align-items: center;
	-webkit-box-pack: center;
	-ms-flex-pack: center;
	justify-content: center;
}

/* line 257, src/angularjs/app.scss */
.superbar__logo {
	max-height: 80%;
	max-width: 80%;
}

/* line 262, src/angularjs/app.scss */
.superbar__body {
	height: calc(100vh - 8rem);
	overflow-y: auto;
}

/* line 267, src/angularjs/app.scss */
.superbar__section {
	border-bottom: 1px solid #cccccc;
	height: 6rem;
}

/* line 272, src/angularjs/app.scss */
.superbar__link {
	font-size: 1.14286em;
	color: inherit;
	display: -webkit-box;
	display: -ms-flexbox;
	display: flex;
	-webkit-box-align: center;
	-ms-flex-align: center;
	align-items: center;
	height: 6rem;
	position: relative;
	text-decoration: none;
}

/* line 282, src/angularjs/app.scss */
.superbar__menu {
	list-style-type: none;
}

/* line 286, src/angularjs/app.scss */
.superbar__menu li {
	margin-top: 0;
}

/* line 290, src/angularjs/app.scss */
.superbar__menu .superbar__link {
	font-size: 1em;
	color: rgba(0, 0, 0, 0.87);
	font-family: "Roboto", sans-serif;
	height: 4rem;
	padding-left: 6rem;
}

/* line 297, src/angularjs/app.scss */
.superbar__menu-icon {
	color: #9ca6b0;
	display: -webkit-inline-box;
	display: -ms-inline-flexbox;
	display: inline-flex;
	-webkit-box-align: center;
	-ms-flex-align: center;
	align-items: center;
	-webkit-box-pack: center;
	-ms-flex-pack: center;
	justify-content: center;
	font-size: 3rem;
	width: 6rem;
}

/* line 307, src/angularjs/app.scss */
.editor {
	display: block;
}

/* line 311, src/angularjs/app.scss */
.version {
	font-size: 0.6em;
	line-height: 4rem;
}

/* line 317, src/angularjs/app.scss */
.dsui-page__related {
	margin-top: 4rem;
}

/* line 320, src/angularjs/app.scss */
.dsui-page__related li {
	margin-top: 0;
}

/* line 324, src/angularjs/app.scss */
.dsui-page__related li:first-child {
	margin-top: 2rem;
}

/* line 330, src/angularjs/app.scss */
.dsui-page__about {
	font-size: 1.14286em;
}

@media (min-width: 768px) {
	/* line 336, src/angularjs/app.scss */
	.dsui-page__intro {
		display: -webkit-box;
		display: -ms-flexbox;
		display: flex;
		width: 100%;
	}
	/* line 345, src/angularjs/app.scss */
	.dsui-page__related {
		width: 20em;
		margin-top: 0;
		margin-left: 16rem;
	}
}

/* line 355, src/angularjs/app.scss */
.pg-colors__colors-list {
	display: -webkit-box;
	display: -ms-flexbox;
	display: flex;
	-ms-flex-wrap: wrap;
	flex-wrap: wrap;
	margin-left: -1.5rem;
	margin-right: -1.5rem;
}

/* line 361, src/angularjs/app.scss */
.pg-colors__colors-list--dark {
	background-color: #3a4d5f;
	padding-bottom: 2rem;
	margin-left: 0;
	margin-right: 0;
}

/* line 369, src/angularjs/app.scss */
.pg-colors__color {
	-webkit-box-shadow: 0.5rem 1rem 2rem rgba(0, 0, 0, 0.3);
	box-shadow: 0.5rem 1rem 2rem rgba(0, 0, 0, 0.3);
	display: -webkit-box;
	display: -ms-flexbox;
	display: flex;
	-webkit-box-orient: vertical;
	-webkit-box-direction: normal;
	-ms-flex-direction: column;
	flex-direction: column;
	-webkit-box-align: center;
	-ms-flex-align: center;
	align-items: center;
	-webkit-box-pack: center;
	-ms-flex-pack: center;
	justify-content: center;
	width: 20rem;
	line-height: 2rem;
	margin-left: 1.5rem;
	margin-right: 1.5rem;
}

/* line 380, src/angularjs/app.scss */
.pg-colors__color--dark {
	background-color: #333333;
	color: white;
}

/* line 385, src/angularjs/app.scss */
.pg-colors__color-value {
	font-size: 0.9em;
	display: -webkit-box;
	display: -ms-flexbox;
	display: flex;
	-webkit-box-orient: vertical;
	-webkit-box-direction: normal;
	-ms-flex-direction: column;
	flex-direction: column;
	height: 12rem;
	width: 100%;
	padding: 2rem;
}

/* line 395, src/angularjs/app.scss */
.pg-colors__color-meta {
	display: -webkit-box;
	display: -ms-flexbox;
	display: flex;
	-webkit-box-orient: vertical;
	-webkit-box-direction: normal;
	-ms-flex-direction: column;
	flex-direction: column;
	-webkit-box-flex: 1;
	-ms-flex-positive: 1;
	flex-grow: 1;
	width: 20rem;
	padding: 1rem;
	font-size: 0.85714em;
	color: rgba(0, 0, 0, 0.54);
	color: rgba(0, 0, 0, 0.87);
}

/* line 404, src/angularjs/app.scss */
.pg-colors__color-meta:empty {
	padding: 0;
}

/* line 408, src/angularjs/app.scss */
.pg-colors__color--dark .pg-colors__color-meta {
	color: white;
}

/* line 414, src/angularjs/app.scss */
.heading__separator {
	border-bottom: 2px solid rgba(0, 0, 0, 0.1);
	padding-bottom: calc(1rem - 2px);
}

/*# sourceMappingURL=dsui-angularjs.css.map */